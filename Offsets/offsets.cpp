#include<iostream>
#include<vulkan/vulkan.h>
#include<fstream>

int main() {
    std::ofstream file;
    file.open("offsets.txt");
    file << "VkOffset2D" << std::endl;
    file << sizeof(VkOffset2D) << std::endl;
        file << "    x: " << offsetof(VkOffset2D, x) << std::endl;
        file << "    y: " << offsetof(VkOffset2D, y) << std::endl;
    file << std::endl;

    file << "VkOffset3D" << std::endl;
    file << sizeof(VkOffset3D) << std::endl;
        file << "    x: " << offsetof(VkOffset3D, x) << std::endl;
        file << "    y: " << offsetof(VkOffset3D, y) << std::endl;
        file << "    z: " << offsetof(VkOffset3D, z) << std::endl;
    file << std::endl;

    file << "VkExtent2D" << std::endl;
    file << sizeof(VkExtent2D) << std::endl;
        file << "    width: " << offsetof(VkExtent2D, width) << std::endl;
        file << "    height: " << offsetof(VkExtent2D, height) << std::endl;
    file << std::endl;

    file << "VkExtent3D" << std::endl;
    file << sizeof(VkExtent3D) << std::endl;
        file << "    width: " << offsetof(VkExtent3D, width) << std::endl;
        file << "    height: " << offsetof(VkExtent3D, height) << std::endl;
        file << "    depth: " << offsetof(VkExtent3D, depth) << std::endl;
    file << std::endl;

    file << "VkViewport" << std::endl;
    file << sizeof(VkViewport) << std::endl;
        file << "    x: " << offsetof(VkViewport, x) << std::endl;
        file << "    y: " << offsetof(VkViewport, y) << std::endl;
        file << "    width: " << offsetof(VkViewport, width) << std::endl;
        file << "    height: " << offsetof(VkViewport, height) << std::endl;
        file << "    minDepth: " << offsetof(VkViewport, minDepth) << std::endl;
        file << "    maxDepth: " << offsetof(VkViewport, maxDepth) << std::endl;
    file << std::endl;

    file << "VkRect2D" << std::endl;
    file << sizeof(VkRect2D) << std::endl;
        file << "    offset: " << offsetof(VkRect2D, offset) << std::endl;
        file << "    extent: " << offsetof(VkRect2D, extent) << std::endl;
    file << std::endl;

    file << "VkClearRect" << std::endl;
    file << sizeof(VkClearRect) << std::endl;
        file << "    rect: " << offsetof(VkClearRect, rect) << std::endl;
        file << "    baseArrayLayer: " << offsetof(VkClearRect, baseArrayLayer) << std::endl;
        file << "    layerCount: " << offsetof(VkClearRect, layerCount) << std::endl;
    file << std::endl;

    file << "VkComponentMapping" << std::endl;
    file << sizeof(VkComponentMapping) << std::endl;
        file << "    r: " << offsetof(VkComponentMapping, r) << std::endl;
        file << "    g: " << offsetof(VkComponentMapping, g) << std::endl;
        file << "    b: " << offsetof(VkComponentMapping, b) << std::endl;
        file << "    a: " << offsetof(VkComponentMapping, a) << std::endl;
    file << std::endl;

    file << "VkPhysicalDeviceProperties" << std::endl;
    file << sizeof(VkPhysicalDeviceProperties) << std::endl;
        file << "    apiVersion: " << offsetof(VkPhysicalDeviceProperties, apiVersion) << std::endl;
        file << "    driverVersion: " << offsetof(VkPhysicalDeviceProperties, driverVersion) << std::endl;
        file << "    vendorID: " << offsetof(VkPhysicalDeviceProperties, vendorID) << std::endl;
        file << "    deviceID: " << offsetof(VkPhysicalDeviceProperties, deviceID) << std::endl;
        file << "    deviceType: " << offsetof(VkPhysicalDeviceProperties, deviceType) << std::endl;
        file << "    deviceName: " << offsetof(VkPhysicalDeviceProperties, deviceName) << std::endl;
        file << "    pipelineCacheUUID: " << offsetof(VkPhysicalDeviceProperties, pipelineCacheUUID) << std::endl;
        file << "    limits: " << offsetof(VkPhysicalDeviceProperties, limits) << std::endl;
        file << "    sparseProperties: " << offsetof(VkPhysicalDeviceProperties, sparseProperties) << std::endl;
    file << std::endl;

    file << "VkExtensionProperties" << std::endl;
    file << sizeof(VkExtensionProperties) << std::endl;
        file << "    extensionName: " << offsetof(VkExtensionProperties, extensionName) << std::endl;
        file << "    specVersion: " << offsetof(VkExtensionProperties, specVersion) << std::endl;
    file << std::endl;

    file << "VkLayerProperties" << std::endl;
    file << sizeof(VkLayerProperties) << std::endl;
        file << "    layerName: " << offsetof(VkLayerProperties, layerName) << std::endl;
        file << "    specVersion: " << offsetof(VkLayerProperties, specVersion) << std::endl;
        file << "    implementationVersion: " << offsetof(VkLayerProperties, implementationVersion) << std::endl;
        file << "    description: " << offsetof(VkLayerProperties, description) << std::endl;
    file << std::endl;

    file << "VkApplicationInfo" << std::endl;
    file << sizeof(VkApplicationInfo) << std::endl;
        file << "    sType: " << offsetof(VkApplicationInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkApplicationInfo, pNext) << std::endl;
        file << "    pApplicationName: " << offsetof(VkApplicationInfo, pApplicationName) << std::endl;
        file << "    applicationVersion: " << offsetof(VkApplicationInfo, applicationVersion) << std::endl;
        file << "    pEngineName: " << offsetof(VkApplicationInfo, pEngineName) << std::endl;
        file << "    engineVersion: " << offsetof(VkApplicationInfo, engineVersion) << std::endl;
        file << "    apiVersion: " << offsetof(VkApplicationInfo, apiVersion) << std::endl;
    file << std::endl;

    file << "VkAllocationCallbacks" << std::endl;
    file << sizeof(VkAllocationCallbacks) << std::endl;
        file << "    pUserData: " << offsetof(VkAllocationCallbacks, pUserData) << std::endl;
        file << "    pfnAllocation: " << offsetof(VkAllocationCallbacks, pfnAllocation) << std::endl;
        file << "    pfnReallocation: " << offsetof(VkAllocationCallbacks, pfnReallocation) << std::endl;
        file << "    pfnFree: " << offsetof(VkAllocationCallbacks, pfnFree) << std::endl;
        file << "    pfnInternalAllocation: " << offsetof(VkAllocationCallbacks, pfnInternalAllocation) << std::endl;
        file << "    pfnInternalFree: " << offsetof(VkAllocationCallbacks, pfnInternalFree) << std::endl;
    file << std::endl;

    file << "VkDeviceQueueCreateInfo" << std::endl;
    file << sizeof(VkDeviceQueueCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkDeviceQueueCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkDeviceQueueCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkDeviceQueueCreateInfo, flags) << std::endl;
        file << "    queueFamilyIndex: " << offsetof(VkDeviceQueueCreateInfo, queueFamilyIndex) << std::endl;
        file << "    queueCount: " << offsetof(VkDeviceQueueCreateInfo, queueCount) << std::endl;
        file << "    pQueuePriorities: " << offsetof(VkDeviceQueueCreateInfo, pQueuePriorities) << std::endl;
    file << std::endl;

    file << "VkDeviceCreateInfo" << std::endl;
    file << sizeof(VkDeviceCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkDeviceCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkDeviceCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkDeviceCreateInfo, flags) << std::endl;
        file << "    queueCreateInfoCount: " << offsetof(VkDeviceCreateInfo, queueCreateInfoCount) << std::endl;
        file << "    pQueueCreateInfos: " << offsetof(VkDeviceCreateInfo, pQueueCreateInfos) << std::endl;
        file << "    enabledLayerCount: " << offsetof(VkDeviceCreateInfo, enabledLayerCount) << std::endl;
        file << "    ppEnabledLayerNames: " << offsetof(VkDeviceCreateInfo, ppEnabledLayerNames) << std::endl;
        file << "    enabledExtensionCount: " << offsetof(VkDeviceCreateInfo, enabledExtensionCount) << std::endl;
        file << "    ppEnabledExtensionNames: " << offsetof(VkDeviceCreateInfo, ppEnabledExtensionNames) << std::endl;
        file << "    pEnabledFeatures: " << offsetof(VkDeviceCreateInfo, pEnabledFeatures) << std::endl;
    file << std::endl;

    file << "VkInstanceCreateInfo" << std::endl;
    file << sizeof(VkInstanceCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkInstanceCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkInstanceCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkInstanceCreateInfo, flags) << std::endl;
        file << "    pApplicationInfo: " << offsetof(VkInstanceCreateInfo, pApplicationInfo) << std::endl;
        file << "    enabledLayerCount: " << offsetof(VkInstanceCreateInfo, enabledLayerCount) << std::endl;
        file << "    ppEnabledLayerNames: " << offsetof(VkInstanceCreateInfo, ppEnabledLayerNames) << std::endl;
        file << "    enabledExtensionCount: " << offsetof(VkInstanceCreateInfo, enabledExtensionCount) << std::endl;
        file << "    ppEnabledExtensionNames: " << offsetof(VkInstanceCreateInfo, ppEnabledExtensionNames) << std::endl;
    file << std::endl;

    file << "VkQueueFamilyProperties" << std::endl;
    file << sizeof(VkQueueFamilyProperties) << std::endl;
        file << "    queueFlags: " << offsetof(VkQueueFamilyProperties, queueFlags) << std::endl;
        file << "    queueCount: " << offsetof(VkQueueFamilyProperties, queueCount) << std::endl;
        file << "    timestampValidBits: " << offsetof(VkQueueFamilyProperties, timestampValidBits) << std::endl;
        file << "    minImageTransferGranularity: " << offsetof(VkQueueFamilyProperties, minImageTransferGranularity) << std::endl;
    file << std::endl;

    file << "VkPhysicalDeviceMemoryProperties" << std::endl;
    file << sizeof(VkPhysicalDeviceMemoryProperties) << std::endl;
        file << "    memoryTypeCount: " << offsetof(VkPhysicalDeviceMemoryProperties, memoryTypeCount) << std::endl;
        file << "    memoryTypes: " << offsetof(VkPhysicalDeviceMemoryProperties, memoryTypes) << std::endl;
        file << "    memoryHeapCount: " << offsetof(VkPhysicalDeviceMemoryProperties, memoryHeapCount) << std::endl;
        file << "    memoryHeaps: " << offsetof(VkPhysicalDeviceMemoryProperties, memoryHeaps) << std::endl;
    file << std::endl;

    file << "VkMemoryAllocateInfo" << std::endl;
    file << sizeof(VkMemoryAllocateInfo) << std::endl;
        file << "    sType: " << offsetof(VkMemoryAllocateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkMemoryAllocateInfo, pNext) << std::endl;
        file << "    allocationSize: " << offsetof(VkMemoryAllocateInfo, allocationSize) << std::endl;
        file << "    memoryTypeIndex: " << offsetof(VkMemoryAllocateInfo, memoryTypeIndex) << std::endl;
    file << std::endl;

    file << "VkMemoryRequirements" << std::endl;
    file << sizeof(VkMemoryRequirements) << std::endl;
        file << "    size: " << offsetof(VkMemoryRequirements, size) << std::endl;
        file << "    alignment: " << offsetof(VkMemoryRequirements, alignment) << std::endl;
        file << "    memoryTypeBits: " << offsetof(VkMemoryRequirements, memoryTypeBits) << std::endl;
    file << std::endl;

    file << "VkSparseImageFormatProperties" << std::endl;
    file << sizeof(VkSparseImageFormatProperties) << std::endl;
        file << "    aspectMask: " << offsetof(VkSparseImageFormatProperties, aspectMask) << std::endl;
        file << "    imageGranularity: " << offsetof(VkSparseImageFormatProperties, imageGranularity) << std::endl;
        file << "    flags: " << offsetof(VkSparseImageFormatProperties, flags) << std::endl;
    file << std::endl;

    file << "VkSparseImageMemoryRequirements" << std::endl;
    file << sizeof(VkSparseImageMemoryRequirements) << std::endl;
        file << "    formatProperties: " << offsetof(VkSparseImageMemoryRequirements, formatProperties) << std::endl;
        file << "    imageMipTailFirstLod: " << offsetof(VkSparseImageMemoryRequirements, imageMipTailFirstLod) << std::endl;
        file << "    imageMipTailSize: " << offsetof(VkSparseImageMemoryRequirements, imageMipTailSize) << std::endl;
        file << "    imageMipTailOffset: " << offsetof(VkSparseImageMemoryRequirements, imageMipTailOffset) << std::endl;
        file << "    imageMipTailStride: " << offsetof(VkSparseImageMemoryRequirements, imageMipTailStride) << std::endl;
    file << std::endl;

    file << "VkMemoryType" << std::endl;
    file << sizeof(VkMemoryType) << std::endl;
        file << "    propertyFlags: " << offsetof(VkMemoryType, propertyFlags) << std::endl;
        file << "    heapIndex: " << offsetof(VkMemoryType, heapIndex) << std::endl;
    file << std::endl;

    file << "VkMemoryHeap" << std::endl;
    file << sizeof(VkMemoryHeap) << std::endl;
        file << "    size: " << offsetof(VkMemoryHeap, size) << std::endl;
        file << "    flags: " << offsetof(VkMemoryHeap, flags) << std::endl;
    file << std::endl;

    file << "VkMappedMemoryRange" << std::endl;
    file << sizeof(VkMappedMemoryRange) << std::endl;
        file << "    sType: " << offsetof(VkMappedMemoryRange, sType) << std::endl;
        file << "    pNext: " << offsetof(VkMappedMemoryRange, pNext) << std::endl;
        file << "    memory: " << offsetof(VkMappedMemoryRange, memory) << std::endl;
        file << "    offset: " << offsetof(VkMappedMemoryRange, offset) << std::endl;
        file << "    size: " << offsetof(VkMappedMemoryRange, size) << std::endl;
    file << std::endl;

    file << "VkFormatProperties" << std::endl;
    file << sizeof(VkFormatProperties) << std::endl;
        file << "    linearTilingFeatures: " << offsetof(VkFormatProperties, linearTilingFeatures) << std::endl;
        file << "    optimalTilingFeatures: " << offsetof(VkFormatProperties, optimalTilingFeatures) << std::endl;
        file << "    bufferFeatures: " << offsetof(VkFormatProperties, bufferFeatures) << std::endl;
    file << std::endl;

    file << "VkImageFormatProperties" << std::endl;
    file << sizeof(VkImageFormatProperties) << std::endl;
        file << "    maxExtent: " << offsetof(VkImageFormatProperties, maxExtent) << std::endl;
        file << "    maxMipLevels: " << offsetof(VkImageFormatProperties, maxMipLevels) << std::endl;
        file << "    maxArrayLayers: " << offsetof(VkImageFormatProperties, maxArrayLayers) << std::endl;
        file << "    sampleCounts: " << offsetof(VkImageFormatProperties, sampleCounts) << std::endl;
        file << "    maxResourceSize: " << offsetof(VkImageFormatProperties, maxResourceSize) << std::endl;
    file << std::endl;

    file << "VkDescriptorBufferInfo" << std::endl;
    file << sizeof(VkDescriptorBufferInfo) << std::endl;
        file << "    buffer: " << offsetof(VkDescriptorBufferInfo, buffer) << std::endl;
        file << "    offset: " << offsetof(VkDescriptorBufferInfo, offset) << std::endl;
        file << "    range: " << offsetof(VkDescriptorBufferInfo, range) << std::endl;
    file << std::endl;

    file << "VkDescriptorImageInfo" << std::endl;
    file << sizeof(VkDescriptorImageInfo) << std::endl;
        file << "    sampler: " << offsetof(VkDescriptorImageInfo, sampler) << std::endl;
        file << "    imageView: " << offsetof(VkDescriptorImageInfo, imageView) << std::endl;
        file << "    imageLayout: " << offsetof(VkDescriptorImageInfo, imageLayout) << std::endl;
    file << std::endl;

    file << "VkWriteDescriptorSet" << std::endl;
    file << sizeof(VkWriteDescriptorSet) << std::endl;
        file << "    sType: " << offsetof(VkWriteDescriptorSet, sType) << std::endl;
        file << "    pNext: " << offsetof(VkWriteDescriptorSet, pNext) << std::endl;
        file << "    dstSet: " << offsetof(VkWriteDescriptorSet, dstSet) << std::endl;
        file << "    dstBinding: " << offsetof(VkWriteDescriptorSet, dstBinding) << std::endl;
        file << "    dstArrayElement: " << offsetof(VkWriteDescriptorSet, dstArrayElement) << std::endl;
        file << "    descriptorCount: " << offsetof(VkWriteDescriptorSet, descriptorCount) << std::endl;
        file << "    descriptorType: " << offsetof(VkWriteDescriptorSet, descriptorType) << std::endl;
        file << "    pImageInfo: " << offsetof(VkWriteDescriptorSet, pImageInfo) << std::endl;
        file << "    pBufferInfo: " << offsetof(VkWriteDescriptorSet, pBufferInfo) << std::endl;
        file << "    pTexelBufferView: " << offsetof(VkWriteDescriptorSet, pTexelBufferView) << std::endl;
    file << std::endl;

    file << "VkCopyDescriptorSet" << std::endl;
    file << sizeof(VkCopyDescriptorSet) << std::endl;
        file << "    sType: " << offsetof(VkCopyDescriptorSet, sType) << std::endl;
        file << "    pNext: " << offsetof(VkCopyDescriptorSet, pNext) << std::endl;
        file << "    srcSet: " << offsetof(VkCopyDescriptorSet, srcSet) << std::endl;
        file << "    srcBinding: " << offsetof(VkCopyDescriptorSet, srcBinding) << std::endl;
        file << "    srcArrayElement: " << offsetof(VkCopyDescriptorSet, srcArrayElement) << std::endl;
        file << "    dstSet: " << offsetof(VkCopyDescriptorSet, dstSet) << std::endl;
        file << "    dstBinding: " << offsetof(VkCopyDescriptorSet, dstBinding) << std::endl;
        file << "    dstArrayElement: " << offsetof(VkCopyDescriptorSet, dstArrayElement) << std::endl;
        file << "    descriptorCount: " << offsetof(VkCopyDescriptorSet, descriptorCount) << std::endl;
    file << std::endl;

    file << "VkBufferCreateInfo" << std::endl;
    file << sizeof(VkBufferCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkBufferCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkBufferCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkBufferCreateInfo, flags) << std::endl;
        file << "    size: " << offsetof(VkBufferCreateInfo, size) << std::endl;
        file << "    usage: " << offsetof(VkBufferCreateInfo, usage) << std::endl;
        file << "    sharingMode: " << offsetof(VkBufferCreateInfo, sharingMode) << std::endl;
        file << "    queueFamilyIndexCount: " << offsetof(VkBufferCreateInfo, queueFamilyIndexCount) << std::endl;
        file << "    pQueueFamilyIndices: " << offsetof(VkBufferCreateInfo, pQueueFamilyIndices) << std::endl;
    file << std::endl;

    file << "VkBufferViewCreateInfo" << std::endl;
    file << sizeof(VkBufferViewCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkBufferViewCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkBufferViewCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkBufferViewCreateInfo, flags) << std::endl;
        file << "    buffer: " << offsetof(VkBufferViewCreateInfo, buffer) << std::endl;
        file << "    format: " << offsetof(VkBufferViewCreateInfo, format) << std::endl;
        file << "    offset: " << offsetof(VkBufferViewCreateInfo, offset) << std::endl;
        file << "    range: " << offsetof(VkBufferViewCreateInfo, range) << std::endl;
    file << std::endl;

    file << "VkImageSubresource" << std::endl;
    file << sizeof(VkImageSubresource) << std::endl;
        file << "    aspectMask: " << offsetof(VkImageSubresource, aspectMask) << std::endl;
        file << "    mipLevel: " << offsetof(VkImageSubresource, mipLevel) << std::endl;
        file << "    arrayLayer: " << offsetof(VkImageSubresource, arrayLayer) << std::endl;
    file << std::endl;

    file << "VkImageSubresourceLayers" << std::endl;
    file << sizeof(VkImageSubresourceLayers) << std::endl;
        file << "    aspectMask: " << offsetof(VkImageSubresourceLayers, aspectMask) << std::endl;
        file << "    mipLevel: " << offsetof(VkImageSubresourceLayers, mipLevel) << std::endl;
        file << "    baseArrayLayer: " << offsetof(VkImageSubresourceLayers, baseArrayLayer) << std::endl;
        file << "    layerCount: " << offsetof(VkImageSubresourceLayers, layerCount) << std::endl;
    file << std::endl;

    file << "VkImageSubresourceRange" << std::endl;
    file << sizeof(VkImageSubresourceRange) << std::endl;
        file << "    aspectMask: " << offsetof(VkImageSubresourceRange, aspectMask) << std::endl;
        file << "    baseMipLevel: " << offsetof(VkImageSubresourceRange, baseMipLevel) << std::endl;
        file << "    levelCount: " << offsetof(VkImageSubresourceRange, levelCount) << std::endl;
        file << "    baseArrayLayer: " << offsetof(VkImageSubresourceRange, baseArrayLayer) << std::endl;
        file << "    layerCount: " << offsetof(VkImageSubresourceRange, layerCount) << std::endl;
    file << std::endl;

    file << "VkMemoryBarrier" << std::endl;
    file << sizeof(VkMemoryBarrier) << std::endl;
        file << "    sType: " << offsetof(VkMemoryBarrier, sType) << std::endl;
        file << "    pNext: " << offsetof(VkMemoryBarrier, pNext) << std::endl;
        file << "    srcAccessMask: " << offsetof(VkMemoryBarrier, srcAccessMask) << std::endl;
        file << "    dstAccessMask: " << offsetof(VkMemoryBarrier, dstAccessMask) << std::endl;
    file << std::endl;

    file << "VkBufferMemoryBarrier" << std::endl;
    file << sizeof(VkBufferMemoryBarrier) << std::endl;
        file << "    sType: " << offsetof(VkBufferMemoryBarrier, sType) << std::endl;
        file << "    pNext: " << offsetof(VkBufferMemoryBarrier, pNext) << std::endl;
        file << "    srcAccessMask: " << offsetof(VkBufferMemoryBarrier, srcAccessMask) << std::endl;
        file << "    dstAccessMask: " << offsetof(VkBufferMemoryBarrier, dstAccessMask) << std::endl;
        file << "    srcQueueFamilyIndex: " << offsetof(VkBufferMemoryBarrier, srcQueueFamilyIndex) << std::endl;
        file << "    dstQueueFamilyIndex: " << offsetof(VkBufferMemoryBarrier, dstQueueFamilyIndex) << std::endl;
        file << "    buffer: " << offsetof(VkBufferMemoryBarrier, buffer) << std::endl;
        file << "    offset: " << offsetof(VkBufferMemoryBarrier, offset) << std::endl;
        file << "    size: " << offsetof(VkBufferMemoryBarrier, size) << std::endl;
    file << std::endl;

    file << "VkImageMemoryBarrier" << std::endl;
    file << sizeof(VkImageMemoryBarrier) << std::endl;
        file << "    sType: " << offsetof(VkImageMemoryBarrier, sType) << std::endl;
        file << "    pNext: " << offsetof(VkImageMemoryBarrier, pNext) << std::endl;
        file << "    srcAccessMask: " << offsetof(VkImageMemoryBarrier, srcAccessMask) << std::endl;
        file << "    dstAccessMask: " << offsetof(VkImageMemoryBarrier, dstAccessMask) << std::endl;
        file << "    oldLayout: " << offsetof(VkImageMemoryBarrier, oldLayout) << std::endl;
        file << "    newLayout: " << offsetof(VkImageMemoryBarrier, newLayout) << std::endl;
        file << "    srcQueueFamilyIndex: " << offsetof(VkImageMemoryBarrier, srcQueueFamilyIndex) << std::endl;
        file << "    dstQueueFamilyIndex: " << offsetof(VkImageMemoryBarrier, dstQueueFamilyIndex) << std::endl;
        file << "    image: " << offsetof(VkImageMemoryBarrier, image) << std::endl;
        file << "    subresourceRange: " << offsetof(VkImageMemoryBarrier, subresourceRange) << std::endl;
    file << std::endl;

    file << "VkImageCreateInfo" << std::endl;
    file << sizeof(VkImageCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkImageCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkImageCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkImageCreateInfo, flags) << std::endl;
        file << "    imageType: " << offsetof(VkImageCreateInfo, imageType) << std::endl;
        file << "    format: " << offsetof(VkImageCreateInfo, format) << std::endl;
        file << "    extent: " << offsetof(VkImageCreateInfo, extent) << std::endl;
        file << "    mipLevels: " << offsetof(VkImageCreateInfo, mipLevels) << std::endl;
        file << "    arrayLayers: " << offsetof(VkImageCreateInfo, arrayLayers) << std::endl;
        file << "    samples: " << offsetof(VkImageCreateInfo, samples) << std::endl;
        file << "    tiling: " << offsetof(VkImageCreateInfo, tiling) << std::endl;
        file << "    usage: " << offsetof(VkImageCreateInfo, usage) << std::endl;
        file << "    sharingMode: " << offsetof(VkImageCreateInfo, sharingMode) << std::endl;
        file << "    queueFamilyIndexCount: " << offsetof(VkImageCreateInfo, queueFamilyIndexCount) << std::endl;
        file << "    pQueueFamilyIndices: " << offsetof(VkImageCreateInfo, pQueueFamilyIndices) << std::endl;
        file << "    initialLayout: " << offsetof(VkImageCreateInfo, initialLayout) << std::endl;
    file << std::endl;

    file << "VkSubresourceLayout" << std::endl;
    file << sizeof(VkSubresourceLayout) << std::endl;
        file << "    offset: " << offsetof(VkSubresourceLayout, offset) << std::endl;
        file << "    size: " << offsetof(VkSubresourceLayout, size) << std::endl;
        file << "    rowPitch: " << offsetof(VkSubresourceLayout, rowPitch) << std::endl;
        file << "    arrayPitch: " << offsetof(VkSubresourceLayout, arrayPitch) << std::endl;
        file << "    depthPitch: " << offsetof(VkSubresourceLayout, depthPitch) << std::endl;
    file << std::endl;

    file << "VkImageViewCreateInfo" << std::endl;
    file << sizeof(VkImageViewCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkImageViewCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkImageViewCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkImageViewCreateInfo, flags) << std::endl;
        file << "    image: " << offsetof(VkImageViewCreateInfo, image) << std::endl;
        file << "    viewType: " << offsetof(VkImageViewCreateInfo, viewType) << std::endl;
        file << "    format: " << offsetof(VkImageViewCreateInfo, format) << std::endl;
        file << "    components: " << offsetof(VkImageViewCreateInfo, components) << std::endl;
        file << "    subresourceRange: " << offsetof(VkImageViewCreateInfo, subresourceRange) << std::endl;
    file << std::endl;

    file << "VkBufferCopy" << std::endl;
    file << sizeof(VkBufferCopy) << std::endl;
        file << "    srcOffset: " << offsetof(VkBufferCopy, srcOffset) << std::endl;
        file << "    dstOffset: " << offsetof(VkBufferCopy, dstOffset) << std::endl;
        file << "    size: " << offsetof(VkBufferCopy, size) << std::endl;
    file << std::endl;

    file << "VkSparseMemoryBind" << std::endl;
    file << sizeof(VkSparseMemoryBind) << std::endl;
        file << "    resourceOffset: " << offsetof(VkSparseMemoryBind, resourceOffset) << std::endl;
        file << "    size: " << offsetof(VkSparseMemoryBind, size) << std::endl;
        file << "    memory: " << offsetof(VkSparseMemoryBind, memory) << std::endl;
        file << "    memoryOffset: " << offsetof(VkSparseMemoryBind, memoryOffset) << std::endl;
        file << "    flags: " << offsetof(VkSparseMemoryBind, flags) << std::endl;
    file << std::endl;

    file << "VkSparseImageMemoryBind" << std::endl;
    file << sizeof(VkSparseImageMemoryBind) << std::endl;
        file << "    subresource: " << offsetof(VkSparseImageMemoryBind, subresource) << std::endl;
        file << "    offset: " << offsetof(VkSparseImageMemoryBind, offset) << std::endl;
        file << "    extent: " << offsetof(VkSparseImageMemoryBind, extent) << std::endl;
        file << "    memory: " << offsetof(VkSparseImageMemoryBind, memory) << std::endl;
        file << "    memoryOffset: " << offsetof(VkSparseImageMemoryBind, memoryOffset) << std::endl;
        file << "    flags: " << offsetof(VkSparseImageMemoryBind, flags) << std::endl;
    file << std::endl;

    file << "VkSparseBufferMemoryBindInfo" << std::endl;
    file << sizeof(VkSparseBufferMemoryBindInfo) << std::endl;
        file << "    buffer: " << offsetof(VkSparseBufferMemoryBindInfo, buffer) << std::endl;
        file << "    bindCount: " << offsetof(VkSparseBufferMemoryBindInfo, bindCount) << std::endl;
        file << "    pBinds: " << offsetof(VkSparseBufferMemoryBindInfo, pBinds) << std::endl;
    file << std::endl;

    file << "VkSparseImageOpaqueMemoryBindInfo" << std::endl;
    file << sizeof(VkSparseImageOpaqueMemoryBindInfo) << std::endl;
        file << "    image: " << offsetof(VkSparseImageOpaqueMemoryBindInfo, image) << std::endl;
        file << "    bindCount: " << offsetof(VkSparseImageOpaqueMemoryBindInfo, bindCount) << std::endl;
        file << "    pBinds: " << offsetof(VkSparseImageOpaqueMemoryBindInfo, pBinds) << std::endl;
    file << std::endl;

    file << "VkSparseImageMemoryBindInfo" << std::endl;
    file << sizeof(VkSparseImageMemoryBindInfo) << std::endl;
        file << "    image: " << offsetof(VkSparseImageMemoryBindInfo, image) << std::endl;
        file << "    bindCount: " << offsetof(VkSparseImageMemoryBindInfo, bindCount) << std::endl;
        file << "    pBinds: " << offsetof(VkSparseImageMemoryBindInfo, pBinds) << std::endl;
    file << std::endl;

    file << "VkBindSparseInfo" << std::endl;
    file << sizeof(VkBindSparseInfo) << std::endl;
        file << "    sType: " << offsetof(VkBindSparseInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkBindSparseInfo, pNext) << std::endl;
        file << "    waitSemaphoreCount: " << offsetof(VkBindSparseInfo, waitSemaphoreCount) << std::endl;
        file << "    pWaitSemaphores: " << offsetof(VkBindSparseInfo, pWaitSemaphores) << std::endl;
        file << "    bufferBindCount: " << offsetof(VkBindSparseInfo, bufferBindCount) << std::endl;
        file << "    pBufferBinds: " << offsetof(VkBindSparseInfo, pBufferBinds) << std::endl;
        file << "    imageOpaqueBindCount: " << offsetof(VkBindSparseInfo, imageOpaqueBindCount) << std::endl;
        file << "    pImageOpaqueBinds: " << offsetof(VkBindSparseInfo, pImageOpaqueBinds) << std::endl;
        file << "    imageBindCount: " << offsetof(VkBindSparseInfo, imageBindCount) << std::endl;
        file << "    pImageBinds: " << offsetof(VkBindSparseInfo, pImageBinds) << std::endl;
        file << "    signalSemaphoreCount: " << offsetof(VkBindSparseInfo, signalSemaphoreCount) << std::endl;
        file << "    pSignalSemaphores: " << offsetof(VkBindSparseInfo, pSignalSemaphores) << std::endl;
    file << std::endl;

    file << "VkImageCopy" << std::endl;
    file << sizeof(VkImageCopy) << std::endl;
        file << "    srcSubresource: " << offsetof(VkImageCopy, srcSubresource) << std::endl;
        file << "    srcOffset: " << offsetof(VkImageCopy, srcOffset) << std::endl;
        file << "    dstSubresource: " << offsetof(VkImageCopy, dstSubresource) << std::endl;
        file << "    dstOffset: " << offsetof(VkImageCopy, dstOffset) << std::endl;
        file << "    extent: " << offsetof(VkImageCopy, extent) << std::endl;
    file << std::endl;

    file << "VkImageBlit" << std::endl;
    file << sizeof(VkImageBlit) << std::endl;
        file << "    srcSubresource: " << offsetof(VkImageBlit, srcSubresource) << std::endl;
        file << "    srcOffsets: " << offsetof(VkImageBlit, srcOffsets) << std::endl;
        file << "    dstSubresource: " << offsetof(VkImageBlit, dstSubresource) << std::endl;
        file << "    dstOffsets: " << offsetof(VkImageBlit, dstOffsets) << std::endl;
    file << std::endl;

    file << "VkBufferImageCopy" << std::endl;
    file << sizeof(VkBufferImageCopy) << std::endl;
        file << "    bufferOffset: " << offsetof(VkBufferImageCopy, bufferOffset) << std::endl;
        file << "    bufferRowLength: " << offsetof(VkBufferImageCopy, bufferRowLength) << std::endl;
        file << "    bufferImageHeight: " << offsetof(VkBufferImageCopy, bufferImageHeight) << std::endl;
        file << "    imageSubresource: " << offsetof(VkBufferImageCopy, imageSubresource) << std::endl;
        file << "    imageOffset: " << offsetof(VkBufferImageCopy, imageOffset) << std::endl;
        file << "    imageExtent: " << offsetof(VkBufferImageCopy, imageExtent) << std::endl;
    file << std::endl;

    file << "VkImageResolve" << std::endl;
    file << sizeof(VkImageResolve) << std::endl;
        file << "    srcSubresource: " << offsetof(VkImageResolve, srcSubresource) << std::endl;
        file << "    srcOffset: " << offsetof(VkImageResolve, srcOffset) << std::endl;
        file << "    dstSubresource: " << offsetof(VkImageResolve, dstSubresource) << std::endl;
        file << "    dstOffset: " << offsetof(VkImageResolve, dstOffset) << std::endl;
        file << "    extent: " << offsetof(VkImageResolve, extent) << std::endl;
    file << std::endl;

    file << "VkShaderModuleCreateInfo" << std::endl;
    file << sizeof(VkShaderModuleCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkShaderModuleCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkShaderModuleCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkShaderModuleCreateInfo, flags) << std::endl;
        file << "    codeSize: " << offsetof(VkShaderModuleCreateInfo, codeSize) << std::endl;
        file << "    pCode: " << offsetof(VkShaderModuleCreateInfo, pCode) << std::endl;
    file << std::endl;

    file << "VkDescriptorSetLayoutBinding" << std::endl;
    file << sizeof(VkDescriptorSetLayoutBinding) << std::endl;
        file << "    binding: " << offsetof(VkDescriptorSetLayoutBinding, binding) << std::endl;
        file << "    descriptorType: " << offsetof(VkDescriptorSetLayoutBinding, descriptorType) << std::endl;
        file << "    descriptorCount: " << offsetof(VkDescriptorSetLayoutBinding, descriptorCount) << std::endl;
        file << "    stageFlags: " << offsetof(VkDescriptorSetLayoutBinding, stageFlags) << std::endl;
        file << "    pImmutableSamplers: " << offsetof(VkDescriptorSetLayoutBinding, pImmutableSamplers) << std::endl;
    file << std::endl;

    file << "VkDescriptorSetLayoutCreateInfo" << std::endl;
    file << sizeof(VkDescriptorSetLayoutCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkDescriptorSetLayoutCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkDescriptorSetLayoutCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkDescriptorSetLayoutCreateInfo, flags) << std::endl;
        file << "    bindingCount: " << offsetof(VkDescriptorSetLayoutCreateInfo, bindingCount) << std::endl;
        file << "    pBindings: " << offsetof(VkDescriptorSetLayoutCreateInfo, pBindings) << std::endl;
    file << std::endl;

    file << "VkDescriptorPoolSize" << std::endl;
    file << sizeof(VkDescriptorPoolSize) << std::endl;
        file << "    type: " << offsetof(VkDescriptorPoolSize, type) << std::endl;
        file << "    descriptorCount: " << offsetof(VkDescriptorPoolSize, descriptorCount) << std::endl;
    file << std::endl;

    file << "VkDescriptorPoolCreateInfo" << std::endl;
    file << sizeof(VkDescriptorPoolCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkDescriptorPoolCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkDescriptorPoolCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkDescriptorPoolCreateInfo, flags) << std::endl;
        file << "    maxSets: " << offsetof(VkDescriptorPoolCreateInfo, maxSets) << std::endl;
        file << "    poolSizeCount: " << offsetof(VkDescriptorPoolCreateInfo, poolSizeCount) << std::endl;
        file << "    pPoolSizes: " << offsetof(VkDescriptorPoolCreateInfo, pPoolSizes) << std::endl;
    file << std::endl;

    file << "VkDescriptorSetAllocateInfo" << std::endl;
    file << sizeof(VkDescriptorSetAllocateInfo) << std::endl;
        file << "    sType: " << offsetof(VkDescriptorSetAllocateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkDescriptorSetAllocateInfo, pNext) << std::endl;
        file << "    descriptorPool: " << offsetof(VkDescriptorSetAllocateInfo, descriptorPool) << std::endl;
        file << "    descriptorSetCount: " << offsetof(VkDescriptorSetAllocateInfo, descriptorSetCount) << std::endl;
        file << "    pSetLayouts: " << offsetof(VkDescriptorSetAllocateInfo, pSetLayouts) << std::endl;
    file << std::endl;

    file << "VkSpecializationMapEntry" << std::endl;
    file << sizeof(VkSpecializationMapEntry) << std::endl;
        file << "    constantID: " << offsetof(VkSpecializationMapEntry, constantID) << std::endl;
        file << "    offset: " << offsetof(VkSpecializationMapEntry, offset) << std::endl;
        file << "    size: " << offsetof(VkSpecializationMapEntry, size) << std::endl;
    file << std::endl;

    file << "VkSpecializationInfo" << std::endl;
    file << sizeof(VkSpecializationInfo) << std::endl;
        file << "    mapEntryCount: " << offsetof(VkSpecializationInfo, mapEntryCount) << std::endl;
        file << "    pMapEntries: " << offsetof(VkSpecializationInfo, pMapEntries) << std::endl;
        file << "    dataSize: " << offsetof(VkSpecializationInfo, dataSize) << std::endl;
        file << "    pData: " << offsetof(VkSpecializationInfo, pData) << std::endl;
    file << std::endl;

    file << "VkPipelineShaderStageCreateInfo" << std::endl;
    file << sizeof(VkPipelineShaderStageCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkPipelineShaderStageCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkPipelineShaderStageCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkPipelineShaderStageCreateInfo, flags) << std::endl;
        file << "    stage: " << offsetof(VkPipelineShaderStageCreateInfo, stage) << std::endl;
        file << "    module: " << offsetof(VkPipelineShaderStageCreateInfo, module) << std::endl;
        file << "    pName: " << offsetof(VkPipelineShaderStageCreateInfo, pName) << std::endl;
        file << "    pSpecializationInfo: " << offsetof(VkPipelineShaderStageCreateInfo, pSpecializationInfo) << std::endl;
    file << std::endl;

    file << "VkComputePipelineCreateInfo" << std::endl;
    file << sizeof(VkComputePipelineCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkComputePipelineCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkComputePipelineCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkComputePipelineCreateInfo, flags) << std::endl;
        file << "    stage: " << offsetof(VkComputePipelineCreateInfo, stage) << std::endl;
        file << "    layout: " << offsetof(VkComputePipelineCreateInfo, layout) << std::endl;
        file << "    basePipelineHandle: " << offsetof(VkComputePipelineCreateInfo, basePipelineHandle) << std::endl;
        file << "    basePipelineIndex: " << offsetof(VkComputePipelineCreateInfo, basePipelineIndex) << std::endl;
    file << std::endl;

    file << "VkVertexInputBindingDescription" << std::endl;
    file << sizeof(VkVertexInputBindingDescription) << std::endl;
        file << "    binding: " << offsetof(VkVertexInputBindingDescription, binding) << std::endl;
        file << "    stride: " << offsetof(VkVertexInputBindingDescription, stride) << std::endl;
        file << "    inputRate: " << offsetof(VkVertexInputBindingDescription, inputRate) << std::endl;
    file << std::endl;

    file << "VkVertexInputAttributeDescription" << std::endl;
    file << sizeof(VkVertexInputAttributeDescription) << std::endl;
        file << "    location: " << offsetof(VkVertexInputAttributeDescription, location) << std::endl;
        file << "    binding: " << offsetof(VkVertexInputAttributeDescription, binding) << std::endl;
        file << "    format: " << offsetof(VkVertexInputAttributeDescription, format) << std::endl;
        file << "    offset: " << offsetof(VkVertexInputAttributeDescription, offset) << std::endl;
    file << std::endl;

    file << "VkPipelineVertexInputStateCreateInfo" << std::endl;
    file << sizeof(VkPipelineVertexInputStateCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkPipelineVertexInputStateCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkPipelineVertexInputStateCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkPipelineVertexInputStateCreateInfo, flags) << std::endl;
        file << "    vertexBindingDescriptionCount: " << offsetof(VkPipelineVertexInputStateCreateInfo, vertexBindingDescriptionCount) << std::endl;
        file << "    pVertexBindingDescriptions: " << offsetof(VkPipelineVertexInputStateCreateInfo, pVertexBindingDescriptions) << std::endl;
        file << "    vertexAttributeDescriptionCount: " << offsetof(VkPipelineVertexInputStateCreateInfo, vertexAttributeDescriptionCount) << std::endl;
        file << "    pVertexAttributeDescriptions: " << offsetof(VkPipelineVertexInputStateCreateInfo, pVertexAttributeDescriptions) << std::endl;
    file << std::endl;

    file << "VkPipelineInputAssemblyStateCreateInfo" << std::endl;
    file << sizeof(VkPipelineInputAssemblyStateCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkPipelineInputAssemblyStateCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkPipelineInputAssemblyStateCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkPipelineInputAssemblyStateCreateInfo, flags) << std::endl;
        file << "    topology: " << offsetof(VkPipelineInputAssemblyStateCreateInfo, topology) << std::endl;
        file << "    primitiveRestartEnable: " << offsetof(VkPipelineInputAssemblyStateCreateInfo, primitiveRestartEnable) << std::endl;
    file << std::endl;

    file << "VkPipelineTessellationStateCreateInfo" << std::endl;
    file << sizeof(VkPipelineTessellationStateCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkPipelineTessellationStateCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkPipelineTessellationStateCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkPipelineTessellationStateCreateInfo, flags) << std::endl;
        file << "    patchControlPoints: " << offsetof(VkPipelineTessellationStateCreateInfo, patchControlPoints) << std::endl;
    file << std::endl;

    file << "VkPipelineViewportStateCreateInfo" << std::endl;
    file << sizeof(VkPipelineViewportStateCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkPipelineViewportStateCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkPipelineViewportStateCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkPipelineViewportStateCreateInfo, flags) << std::endl;
        file << "    viewportCount: " << offsetof(VkPipelineViewportStateCreateInfo, viewportCount) << std::endl;
        file << "    pViewports: " << offsetof(VkPipelineViewportStateCreateInfo, pViewports) << std::endl;
        file << "    scissorCount: " << offsetof(VkPipelineViewportStateCreateInfo, scissorCount) << std::endl;
        file << "    pScissors: " << offsetof(VkPipelineViewportStateCreateInfo, pScissors) << std::endl;
    file << std::endl;

    file << "VkPipelineRasterizationStateCreateInfo" << std::endl;
    file << sizeof(VkPipelineRasterizationStateCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkPipelineRasterizationStateCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkPipelineRasterizationStateCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkPipelineRasterizationStateCreateInfo, flags) << std::endl;
        file << "    depthClampEnable: " << offsetof(VkPipelineRasterizationStateCreateInfo, depthClampEnable) << std::endl;
        file << "    rasterizerDiscardEnable: " << offsetof(VkPipelineRasterizationStateCreateInfo, rasterizerDiscardEnable) << std::endl;
        file << "    polygonMode: " << offsetof(VkPipelineRasterizationStateCreateInfo, polygonMode) << std::endl;
        file << "    cullMode: " << offsetof(VkPipelineRasterizationStateCreateInfo, cullMode) << std::endl;
        file << "    frontFace: " << offsetof(VkPipelineRasterizationStateCreateInfo, frontFace) << std::endl;
        file << "    depthBiasEnable: " << offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasEnable) << std::endl;
        file << "    depthBiasConstantFactor: " << offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasConstantFactor) << std::endl;
        file << "    depthBiasClamp: " << offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasClamp) << std::endl;
        file << "    depthBiasSlopeFactor: " << offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasSlopeFactor) << std::endl;
        file << "    lineWidth: " << offsetof(VkPipelineRasterizationStateCreateInfo, lineWidth) << std::endl;
    file << std::endl;

    file << "VkPipelineMultisampleStateCreateInfo" << std::endl;
    file << sizeof(VkPipelineMultisampleStateCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkPipelineMultisampleStateCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkPipelineMultisampleStateCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkPipelineMultisampleStateCreateInfo, flags) << std::endl;
        file << "    rasterizationSamples: " << offsetof(VkPipelineMultisampleStateCreateInfo, rasterizationSamples) << std::endl;
        file << "    sampleShadingEnable: " << offsetof(VkPipelineMultisampleStateCreateInfo, sampleShadingEnable) << std::endl;
        file << "    minSampleShading: " << offsetof(VkPipelineMultisampleStateCreateInfo, minSampleShading) << std::endl;
        file << "    pSampleMask: " << offsetof(VkPipelineMultisampleStateCreateInfo, pSampleMask) << std::endl;
        file << "    alphaToCoverageEnable: " << offsetof(VkPipelineMultisampleStateCreateInfo, alphaToCoverageEnable) << std::endl;
        file << "    alphaToOneEnable: " << offsetof(VkPipelineMultisampleStateCreateInfo, alphaToOneEnable) << std::endl;
    file << std::endl;

    file << "VkPipelineColorBlendAttachmentState" << std::endl;
    file << sizeof(VkPipelineColorBlendAttachmentState) << std::endl;
        file << "    blendEnable: " << offsetof(VkPipelineColorBlendAttachmentState, blendEnable) << std::endl;
        file << "    srcColorBlendFactor: " << offsetof(VkPipelineColorBlendAttachmentState, srcColorBlendFactor) << std::endl;
        file << "    dstColorBlendFactor: " << offsetof(VkPipelineColorBlendAttachmentState, dstColorBlendFactor) << std::endl;
        file << "    colorBlendOp: " << offsetof(VkPipelineColorBlendAttachmentState, colorBlendOp) << std::endl;
        file << "    srcAlphaBlendFactor: " << offsetof(VkPipelineColorBlendAttachmentState, srcAlphaBlendFactor) << std::endl;
        file << "    dstAlphaBlendFactor: " << offsetof(VkPipelineColorBlendAttachmentState, dstAlphaBlendFactor) << std::endl;
        file << "    alphaBlendOp: " << offsetof(VkPipelineColorBlendAttachmentState, alphaBlendOp) << std::endl;
        file << "    colorWriteMask: " << offsetof(VkPipelineColorBlendAttachmentState, colorWriteMask) << std::endl;
    file << std::endl;

    file << "VkPipelineColorBlendStateCreateInfo" << std::endl;
    file << sizeof(VkPipelineColorBlendStateCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkPipelineColorBlendStateCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkPipelineColorBlendStateCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkPipelineColorBlendStateCreateInfo, flags) << std::endl;
        file << "    logicOpEnable: " << offsetof(VkPipelineColorBlendStateCreateInfo, logicOpEnable) << std::endl;
        file << "    logicOp: " << offsetof(VkPipelineColorBlendStateCreateInfo, logicOp) << std::endl;
        file << "    attachmentCount: " << offsetof(VkPipelineColorBlendStateCreateInfo, attachmentCount) << std::endl;
        file << "    pAttachments: " << offsetof(VkPipelineColorBlendStateCreateInfo, pAttachments) << std::endl;
        file << "    blendConstants: " << offsetof(VkPipelineColorBlendStateCreateInfo, blendConstants) << std::endl;
    file << std::endl;

    file << "VkPipelineDynamicStateCreateInfo" << std::endl;
    file << sizeof(VkPipelineDynamicStateCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkPipelineDynamicStateCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkPipelineDynamicStateCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkPipelineDynamicStateCreateInfo, flags) << std::endl;
        file << "    dynamicStateCount: " << offsetof(VkPipelineDynamicStateCreateInfo, dynamicStateCount) << std::endl;
        file << "    pDynamicStates: " << offsetof(VkPipelineDynamicStateCreateInfo, pDynamicStates) << std::endl;
    file << std::endl;

    file << "VkStencilOpState" << std::endl;
    file << sizeof(VkStencilOpState) << std::endl;
        file << "    failOp: " << offsetof(VkStencilOpState, failOp) << std::endl;
        file << "    passOp: " << offsetof(VkStencilOpState, passOp) << std::endl;
        file << "    depthFailOp: " << offsetof(VkStencilOpState, depthFailOp) << std::endl;
        file << "    compareOp: " << offsetof(VkStencilOpState, compareOp) << std::endl;
        file << "    compareMask: " << offsetof(VkStencilOpState, compareMask) << std::endl;
        file << "    writeMask: " << offsetof(VkStencilOpState, writeMask) << std::endl;
        file << "    reference: " << offsetof(VkStencilOpState, reference) << std::endl;
    file << std::endl;

    file << "VkPipelineDepthStencilStateCreateInfo" << std::endl;
    file << sizeof(VkPipelineDepthStencilStateCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkPipelineDepthStencilStateCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkPipelineDepthStencilStateCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkPipelineDepthStencilStateCreateInfo, flags) << std::endl;
        file << "    depthTestEnable: " << offsetof(VkPipelineDepthStencilStateCreateInfo, depthTestEnable) << std::endl;
        file << "    depthWriteEnable: " << offsetof(VkPipelineDepthStencilStateCreateInfo, depthWriteEnable) << std::endl;
        file << "    depthCompareOp: " << offsetof(VkPipelineDepthStencilStateCreateInfo, depthCompareOp) << std::endl;
        file << "    depthBoundsTestEnable: " << offsetof(VkPipelineDepthStencilStateCreateInfo, depthBoundsTestEnable) << std::endl;
        file << "    stencilTestEnable: " << offsetof(VkPipelineDepthStencilStateCreateInfo, stencilTestEnable) << std::endl;
        file << "    front: " << offsetof(VkPipelineDepthStencilStateCreateInfo, front) << std::endl;
        file << "    back: " << offsetof(VkPipelineDepthStencilStateCreateInfo, back) << std::endl;
        file << "    minDepthBounds: " << offsetof(VkPipelineDepthStencilStateCreateInfo, minDepthBounds) << std::endl;
        file << "    maxDepthBounds: " << offsetof(VkPipelineDepthStencilStateCreateInfo, maxDepthBounds) << std::endl;
    file << std::endl;

    file << "VkGraphicsPipelineCreateInfo" << std::endl;
    file << sizeof(VkGraphicsPipelineCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkGraphicsPipelineCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkGraphicsPipelineCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkGraphicsPipelineCreateInfo, flags) << std::endl;
        file << "    stageCount: " << offsetof(VkGraphicsPipelineCreateInfo, stageCount) << std::endl;
        file << "    pStages: " << offsetof(VkGraphicsPipelineCreateInfo, pStages) << std::endl;
        file << "    pVertexInputState: " << offsetof(VkGraphicsPipelineCreateInfo, pVertexInputState) << std::endl;
        file << "    pInputAssemblyState: " << offsetof(VkGraphicsPipelineCreateInfo, pInputAssemblyState) << std::endl;
        file << "    pTessellationState: " << offsetof(VkGraphicsPipelineCreateInfo, pTessellationState) << std::endl;
        file << "    pViewportState: " << offsetof(VkGraphicsPipelineCreateInfo, pViewportState) << std::endl;
        file << "    pRasterizationState: " << offsetof(VkGraphicsPipelineCreateInfo, pRasterizationState) << std::endl;
        file << "    pMultisampleState: " << offsetof(VkGraphicsPipelineCreateInfo, pMultisampleState) << std::endl;
        file << "    pDepthStencilState: " << offsetof(VkGraphicsPipelineCreateInfo, pDepthStencilState) << std::endl;
        file << "    pColorBlendState: " << offsetof(VkGraphicsPipelineCreateInfo, pColorBlendState) << std::endl;
        file << "    pDynamicState: " << offsetof(VkGraphicsPipelineCreateInfo, pDynamicState) << std::endl;
        file << "    layout: " << offsetof(VkGraphicsPipelineCreateInfo, layout) << std::endl;
        file << "    renderPass: " << offsetof(VkGraphicsPipelineCreateInfo, renderPass) << std::endl;
        file << "    subpass: " << offsetof(VkGraphicsPipelineCreateInfo, subpass) << std::endl;
        file << "    basePipelineHandle: " << offsetof(VkGraphicsPipelineCreateInfo, basePipelineHandle) << std::endl;
        file << "    basePipelineIndex: " << offsetof(VkGraphicsPipelineCreateInfo, basePipelineIndex) << std::endl;
    file << std::endl;

    file << "VkPipelineCacheCreateInfo" << std::endl;
    file << sizeof(VkPipelineCacheCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkPipelineCacheCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkPipelineCacheCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkPipelineCacheCreateInfo, flags) << std::endl;
        file << "    initialDataSize: " << offsetof(VkPipelineCacheCreateInfo, initialDataSize) << std::endl;
        file << "    pInitialData: " << offsetof(VkPipelineCacheCreateInfo, pInitialData) << std::endl;
    file << std::endl;

    file << "VkPushConstantRange" << std::endl;
    file << sizeof(VkPushConstantRange) << std::endl;
        file << "    stageFlags: " << offsetof(VkPushConstantRange, stageFlags) << std::endl;
        file << "    offset: " << offsetof(VkPushConstantRange, offset) << std::endl;
        file << "    size: " << offsetof(VkPushConstantRange, size) << std::endl;
    file << std::endl;

    file << "VkPipelineLayoutCreateInfo" << std::endl;
    file << sizeof(VkPipelineLayoutCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkPipelineLayoutCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkPipelineLayoutCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkPipelineLayoutCreateInfo, flags) << std::endl;
        file << "    setLayoutCount: " << offsetof(VkPipelineLayoutCreateInfo, setLayoutCount) << std::endl;
        file << "    pSetLayouts: " << offsetof(VkPipelineLayoutCreateInfo, pSetLayouts) << std::endl;
        file << "    pushConstantRangeCount: " << offsetof(VkPipelineLayoutCreateInfo, pushConstantRangeCount) << std::endl;
        file << "    pPushConstantRanges: " << offsetof(VkPipelineLayoutCreateInfo, pPushConstantRanges) << std::endl;
    file << std::endl;

    file << "VkSamplerCreateInfo" << std::endl;
    file << sizeof(VkSamplerCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkSamplerCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkSamplerCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkSamplerCreateInfo, flags) << std::endl;
        file << "    magFilter: " << offsetof(VkSamplerCreateInfo, magFilter) << std::endl;
        file << "    minFilter: " << offsetof(VkSamplerCreateInfo, minFilter) << std::endl;
        file << "    mipmapMode: " << offsetof(VkSamplerCreateInfo, mipmapMode) << std::endl;
        file << "    addressModeU: " << offsetof(VkSamplerCreateInfo, addressModeU) << std::endl;
        file << "    addressModeV: " << offsetof(VkSamplerCreateInfo, addressModeV) << std::endl;
        file << "    addressModeW: " << offsetof(VkSamplerCreateInfo, addressModeW) << std::endl;
        file << "    mipLodBias: " << offsetof(VkSamplerCreateInfo, mipLodBias) << std::endl;
        file << "    anisotropyEnable: " << offsetof(VkSamplerCreateInfo, anisotropyEnable) << std::endl;
        file << "    maxAnisotropy: " << offsetof(VkSamplerCreateInfo, maxAnisotropy) << std::endl;
        file << "    compareEnable: " << offsetof(VkSamplerCreateInfo, compareEnable) << std::endl;
        file << "    compareOp: " << offsetof(VkSamplerCreateInfo, compareOp) << std::endl;
        file << "    minLod: " << offsetof(VkSamplerCreateInfo, minLod) << std::endl;
        file << "    maxLod: " << offsetof(VkSamplerCreateInfo, maxLod) << std::endl;
        file << "    borderColor: " << offsetof(VkSamplerCreateInfo, borderColor) << std::endl;
        file << "    unnormalizedCoordinates: " << offsetof(VkSamplerCreateInfo, unnormalizedCoordinates) << std::endl;
    file << std::endl;

    file << "VkCommandPoolCreateInfo" << std::endl;
    file << sizeof(VkCommandPoolCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkCommandPoolCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkCommandPoolCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkCommandPoolCreateInfo, flags) << std::endl;
        file << "    queueFamilyIndex: " << offsetof(VkCommandPoolCreateInfo, queueFamilyIndex) << std::endl;
    file << std::endl;

    file << "VkCommandBufferAllocateInfo" << std::endl;
    file << sizeof(VkCommandBufferAllocateInfo) << std::endl;
        file << "    sType: " << offsetof(VkCommandBufferAllocateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkCommandBufferAllocateInfo, pNext) << std::endl;
        file << "    commandPool: " << offsetof(VkCommandBufferAllocateInfo, commandPool) << std::endl;
        file << "    level: " << offsetof(VkCommandBufferAllocateInfo, level) << std::endl;
        file << "    commandBufferCount: " << offsetof(VkCommandBufferAllocateInfo, commandBufferCount) << std::endl;
    file << std::endl;

    file << "VkCommandBufferInheritanceInfo" << std::endl;
    file << sizeof(VkCommandBufferInheritanceInfo) << std::endl;
        file << "    sType: " << offsetof(VkCommandBufferInheritanceInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkCommandBufferInheritanceInfo, pNext) << std::endl;
        file << "    renderPass: " << offsetof(VkCommandBufferInheritanceInfo, renderPass) << std::endl;
        file << "    subpass: " << offsetof(VkCommandBufferInheritanceInfo, subpass) << std::endl;
        file << "    framebuffer: " << offsetof(VkCommandBufferInheritanceInfo, framebuffer) << std::endl;
        file << "    occlusionQueryEnable: " << offsetof(VkCommandBufferInheritanceInfo, occlusionQueryEnable) << std::endl;
        file << "    queryFlags: " << offsetof(VkCommandBufferInheritanceInfo, queryFlags) << std::endl;
        file << "    pipelineStatistics: " << offsetof(VkCommandBufferInheritanceInfo, pipelineStatistics) << std::endl;
    file << std::endl;

    file << "VkCommandBufferBeginInfo" << std::endl;
    file << sizeof(VkCommandBufferBeginInfo) << std::endl;
        file << "    sType: " << offsetof(VkCommandBufferBeginInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkCommandBufferBeginInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkCommandBufferBeginInfo, flags) << std::endl;
        file << "    pInheritanceInfo: " << offsetof(VkCommandBufferBeginInfo, pInheritanceInfo) << std::endl;
    file << std::endl;

    file << "VkRenderPassBeginInfo" << std::endl;
    file << sizeof(VkRenderPassBeginInfo) << std::endl;
        file << "    sType: " << offsetof(VkRenderPassBeginInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkRenderPassBeginInfo, pNext) << std::endl;
        file << "    renderPass: " << offsetof(VkRenderPassBeginInfo, renderPass) << std::endl;
        file << "    framebuffer: " << offsetof(VkRenderPassBeginInfo, framebuffer) << std::endl;
        file << "    renderArea: " << offsetof(VkRenderPassBeginInfo, renderArea) << std::endl;
        file << "    clearValueCount: " << offsetof(VkRenderPassBeginInfo, clearValueCount) << std::endl;
        file << "    pClearValues: " << offsetof(VkRenderPassBeginInfo, pClearValues) << std::endl;
    file << std::endl;

    file << "VkClearColorValue" << std::endl;
    file << sizeof(VkClearColorValue) << std::endl;
        file << "    float32: " << offsetof(VkClearColorValue, float32) << std::endl;
        file << "    int32: " << offsetof(VkClearColorValue, int32) << std::endl;
        file << "    uint32: " << offsetof(VkClearColorValue, uint32) << std::endl;
    file << std::endl;

    file << "VkClearDepthStencilValue" << std::endl;
    file << sizeof(VkClearDepthStencilValue) << std::endl;
        file << "    depth: " << offsetof(VkClearDepthStencilValue, depth) << std::endl;
        file << "    stencil: " << offsetof(VkClearDepthStencilValue, stencil) << std::endl;
    file << std::endl;

    file << "VkClearValue" << std::endl;
    file << sizeof(VkClearValue) << std::endl;
        file << "    color: " << offsetof(VkClearValue, color) << std::endl;
        file << "    depthStencil: " << offsetof(VkClearValue, depthStencil) << std::endl;
    file << std::endl;

    file << "VkClearAttachment" << std::endl;
    file << sizeof(VkClearAttachment) << std::endl;
        file << "    aspectMask: " << offsetof(VkClearAttachment, aspectMask) << std::endl;
        file << "    colorAttachment: " << offsetof(VkClearAttachment, colorAttachment) << std::endl;
        file << "    clearValue: " << offsetof(VkClearAttachment, clearValue) << std::endl;
    file << std::endl;

    file << "VkAttachmentDescription" << std::endl;
    file << sizeof(VkAttachmentDescription) << std::endl;
        file << "    flags: " << offsetof(VkAttachmentDescription, flags) << std::endl;
        file << "    format: " << offsetof(VkAttachmentDescription, format) << std::endl;
        file << "    samples: " << offsetof(VkAttachmentDescription, samples) << std::endl;
        file << "    loadOp: " << offsetof(VkAttachmentDescription, loadOp) << std::endl;
        file << "    storeOp: " << offsetof(VkAttachmentDescription, storeOp) << std::endl;
        file << "    stencilLoadOp: " << offsetof(VkAttachmentDescription, stencilLoadOp) << std::endl;
        file << "    stencilStoreOp: " << offsetof(VkAttachmentDescription, stencilStoreOp) << std::endl;
        file << "    initialLayout: " << offsetof(VkAttachmentDescription, initialLayout) << std::endl;
        file << "    finalLayout: " << offsetof(VkAttachmentDescription, finalLayout) << std::endl;
    file << std::endl;

    file << "VkAttachmentReference" << std::endl;
    file << sizeof(VkAttachmentReference) << std::endl;
        file << "    attachment: " << offsetof(VkAttachmentReference, attachment) << std::endl;
        file << "    layout: " << offsetof(VkAttachmentReference, layout) << std::endl;
    file << std::endl;

    file << "VkSubpassDescription" << std::endl;
    file << sizeof(VkSubpassDescription) << std::endl;
        file << "    flags: " << offsetof(VkSubpassDescription, flags) << std::endl;
        file << "    pipelineBindPoint: " << offsetof(VkSubpassDescription, pipelineBindPoint) << std::endl;
        file << "    inputAttachmentCount: " << offsetof(VkSubpassDescription, inputAttachmentCount) << std::endl;
        file << "    pInputAttachments: " << offsetof(VkSubpassDescription, pInputAttachments) << std::endl;
        file << "    colorAttachmentCount: " << offsetof(VkSubpassDescription, colorAttachmentCount) << std::endl;
        file << "    pColorAttachments: " << offsetof(VkSubpassDescription, pColorAttachments) << std::endl;
        file << "    pResolveAttachments: " << offsetof(VkSubpassDescription, pResolveAttachments) << std::endl;
        file << "    pDepthStencilAttachment: " << offsetof(VkSubpassDescription, pDepthStencilAttachment) << std::endl;
        file << "    preserveAttachmentCount: " << offsetof(VkSubpassDescription, preserveAttachmentCount) << std::endl;
        file << "    pPreserveAttachments: " << offsetof(VkSubpassDescription, pPreserveAttachments) << std::endl;
    file << std::endl;

    file << "VkSubpassDependency" << std::endl;
    file << sizeof(VkSubpassDependency) << std::endl;
        file << "    srcSubpass: " << offsetof(VkSubpassDependency, srcSubpass) << std::endl;
        file << "    dstSubpass: " << offsetof(VkSubpassDependency, dstSubpass) << std::endl;
        file << "    srcStageMask: " << offsetof(VkSubpassDependency, srcStageMask) << std::endl;
        file << "    dstStageMask: " << offsetof(VkSubpassDependency, dstStageMask) << std::endl;
        file << "    srcAccessMask: " << offsetof(VkSubpassDependency, srcAccessMask) << std::endl;
        file << "    dstAccessMask: " << offsetof(VkSubpassDependency, dstAccessMask) << std::endl;
        file << "    dependencyFlags: " << offsetof(VkSubpassDependency, dependencyFlags) << std::endl;
    file << std::endl;

    file << "VkRenderPassCreateInfo" << std::endl;
    file << sizeof(VkRenderPassCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkRenderPassCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkRenderPassCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkRenderPassCreateInfo, flags) << std::endl;
        file << "    attachmentCount: " << offsetof(VkRenderPassCreateInfo, attachmentCount) << std::endl;
        file << "    pAttachments: " << offsetof(VkRenderPassCreateInfo, pAttachments) << std::endl;
        file << "    subpassCount: " << offsetof(VkRenderPassCreateInfo, subpassCount) << std::endl;
        file << "    pSubpasses: " << offsetof(VkRenderPassCreateInfo, pSubpasses) << std::endl;
        file << "    dependencyCount: " << offsetof(VkRenderPassCreateInfo, dependencyCount) << std::endl;
        file << "    pDependencies: " << offsetof(VkRenderPassCreateInfo, pDependencies) << std::endl;
    file << std::endl;

    file << "VkEventCreateInfo" << std::endl;
    file << sizeof(VkEventCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkEventCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkEventCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkEventCreateInfo, flags) << std::endl;
    file << std::endl;

    file << "VkFenceCreateInfo" << std::endl;
    file << sizeof(VkFenceCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkFenceCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkFenceCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkFenceCreateInfo, flags) << std::endl;
    file << std::endl;

    file << "VkPhysicalDeviceFeatures" << std::endl;
    file << sizeof(VkPhysicalDeviceFeatures) << std::endl;
        file << "    robustBufferAccess: " << offsetof(VkPhysicalDeviceFeatures, robustBufferAccess) << std::endl;
        file << "    fullDrawIndexUint32: " << offsetof(VkPhysicalDeviceFeatures, fullDrawIndexUint32) << std::endl;
        file << "    imageCubeArray: " << offsetof(VkPhysicalDeviceFeatures, imageCubeArray) << std::endl;
        file << "    independentBlend: " << offsetof(VkPhysicalDeviceFeatures, independentBlend) << std::endl;
        file << "    geometryShader: " << offsetof(VkPhysicalDeviceFeatures, geometryShader) << std::endl;
        file << "    tessellationShader: " << offsetof(VkPhysicalDeviceFeatures, tessellationShader) << std::endl;
        file << "    sampleRateShading: " << offsetof(VkPhysicalDeviceFeatures, sampleRateShading) << std::endl;
        file << "    dualSrcBlend: " << offsetof(VkPhysicalDeviceFeatures, dualSrcBlend) << std::endl;
        file << "    logicOp: " << offsetof(VkPhysicalDeviceFeatures, logicOp) << std::endl;
        file << "    multiDrawIndirect: " << offsetof(VkPhysicalDeviceFeatures, multiDrawIndirect) << std::endl;
        file << "    drawIndirectFirstInstance: " << offsetof(VkPhysicalDeviceFeatures, drawIndirectFirstInstance) << std::endl;
        file << "    depthClamp: " << offsetof(VkPhysicalDeviceFeatures, depthClamp) << std::endl;
        file << "    depthBiasClamp: " << offsetof(VkPhysicalDeviceFeatures, depthBiasClamp) << std::endl;
        file << "    fillModeNonSolid: " << offsetof(VkPhysicalDeviceFeatures, fillModeNonSolid) << std::endl;
        file << "    depthBounds: " << offsetof(VkPhysicalDeviceFeatures, depthBounds) << std::endl;
        file << "    wideLines: " << offsetof(VkPhysicalDeviceFeatures, wideLines) << std::endl;
        file << "    largePoints: " << offsetof(VkPhysicalDeviceFeatures, largePoints) << std::endl;
        file << "    alphaToOne: " << offsetof(VkPhysicalDeviceFeatures, alphaToOne) << std::endl;
        file << "    multiViewport: " << offsetof(VkPhysicalDeviceFeatures, multiViewport) << std::endl;
        file << "    samplerAnisotropy: " << offsetof(VkPhysicalDeviceFeatures, samplerAnisotropy) << std::endl;
        file << "    textureCompressionETC2: " << offsetof(VkPhysicalDeviceFeatures, textureCompressionETC2) << std::endl;
        file << "    textureCompressionASTC_LDR: " << offsetof(VkPhysicalDeviceFeatures, textureCompressionASTC_LDR) << std::endl;
        file << "    textureCompressionBC: " << offsetof(VkPhysicalDeviceFeatures, textureCompressionBC) << std::endl;
        file << "    occlusionQueryPrecise: " << offsetof(VkPhysicalDeviceFeatures, occlusionQueryPrecise) << std::endl;
        file << "    pipelineStatisticsQuery: " << offsetof(VkPhysicalDeviceFeatures, pipelineStatisticsQuery) << std::endl;
        file << "    vertexPipelineStoresAndAtomics: " << offsetof(VkPhysicalDeviceFeatures, vertexPipelineStoresAndAtomics) << std::endl;
        file << "    fragmentStoresAndAtomics: " << offsetof(VkPhysicalDeviceFeatures, fragmentStoresAndAtomics) << std::endl;
        file << "    shaderTessellationAndGeometryPointSize: " << offsetof(VkPhysicalDeviceFeatures, shaderTessellationAndGeometryPointSize) << std::endl;
        file << "    shaderImageGatherExtended: " << offsetof(VkPhysicalDeviceFeatures, shaderImageGatherExtended) << std::endl;
        file << "    shaderStorageImageExtendedFormats: " << offsetof(VkPhysicalDeviceFeatures, shaderStorageImageExtendedFormats) << std::endl;
        file << "    shaderStorageImageMultisample: " << offsetof(VkPhysicalDeviceFeatures, shaderStorageImageMultisample) << std::endl;
        file << "    shaderStorageImageReadWithoutFormat: " << offsetof(VkPhysicalDeviceFeatures, shaderStorageImageReadWithoutFormat) << std::endl;
        file << "    shaderStorageImageWriteWithoutFormat: " << offsetof(VkPhysicalDeviceFeatures, shaderStorageImageWriteWithoutFormat) << std::endl;
        file << "    shaderUniformBufferArrayDynamicIndexing: " << offsetof(VkPhysicalDeviceFeatures, shaderUniformBufferArrayDynamicIndexing) << std::endl;
        file << "    shaderSampledImageArrayDynamicIndexing: " << offsetof(VkPhysicalDeviceFeatures, shaderSampledImageArrayDynamicIndexing) << std::endl;
        file << "    shaderStorageBufferArrayDynamicIndexing: " << offsetof(VkPhysicalDeviceFeatures, shaderStorageBufferArrayDynamicIndexing) << std::endl;
        file << "    shaderStorageImageArrayDynamicIndexing: " << offsetof(VkPhysicalDeviceFeatures, shaderStorageImageArrayDynamicIndexing) << std::endl;
        file << "    shaderClipDistance: " << offsetof(VkPhysicalDeviceFeatures, shaderClipDistance) << std::endl;
        file << "    shaderCullDistance: " << offsetof(VkPhysicalDeviceFeatures, shaderCullDistance) << std::endl;
        file << "    shaderFloat64: " << offsetof(VkPhysicalDeviceFeatures, shaderFloat64) << std::endl;
        file << "    shaderInt64: " << offsetof(VkPhysicalDeviceFeatures, shaderInt64) << std::endl;
        file << "    shaderInt16: " << offsetof(VkPhysicalDeviceFeatures, shaderInt16) << std::endl;
        file << "    shaderResourceResidency: " << offsetof(VkPhysicalDeviceFeatures, shaderResourceResidency) << std::endl;
        file << "    shaderResourceMinLod: " << offsetof(VkPhysicalDeviceFeatures, shaderResourceMinLod) << std::endl;
        file << "    sparseBinding: " << offsetof(VkPhysicalDeviceFeatures, sparseBinding) << std::endl;
        file << "    sparseResidencyBuffer: " << offsetof(VkPhysicalDeviceFeatures, sparseResidencyBuffer) << std::endl;
        file << "    sparseResidencyImage2D: " << offsetof(VkPhysicalDeviceFeatures, sparseResidencyImage2D) << std::endl;
        file << "    sparseResidencyImage3D: " << offsetof(VkPhysicalDeviceFeatures, sparseResidencyImage3D) << std::endl;
        file << "    sparseResidency2Samples: " << offsetof(VkPhysicalDeviceFeatures, sparseResidency2Samples) << std::endl;
        file << "    sparseResidency4Samples: " << offsetof(VkPhysicalDeviceFeatures, sparseResidency4Samples) << std::endl;
        file << "    sparseResidency8Samples: " << offsetof(VkPhysicalDeviceFeatures, sparseResidency8Samples) << std::endl;
        file << "    sparseResidency16Samples: " << offsetof(VkPhysicalDeviceFeatures, sparseResidency16Samples) << std::endl;
        file << "    sparseResidencyAliased: " << offsetof(VkPhysicalDeviceFeatures, sparseResidencyAliased) << std::endl;
        file << "    variableMultisampleRate: " << offsetof(VkPhysicalDeviceFeatures, variableMultisampleRate) << std::endl;
        file << "    inheritedQueries: " << offsetof(VkPhysicalDeviceFeatures, inheritedQueries) << std::endl;
    file << std::endl;

    file << "VkPhysicalDeviceSparseProperties" << std::endl;
    file << sizeof(VkPhysicalDeviceSparseProperties) << std::endl;
        file << "    residencyStandard2DBlockShape: " << offsetof(VkPhysicalDeviceSparseProperties, residencyStandard2DBlockShape) << std::endl;
        file << "    residencyStandard2DMultisampleBlockShape: " << offsetof(VkPhysicalDeviceSparseProperties, residencyStandard2DMultisampleBlockShape) << std::endl;
        file << "    residencyStandard3DBlockShape: " << offsetof(VkPhysicalDeviceSparseProperties, residencyStandard3DBlockShape) << std::endl;
        file << "    residencyAlignedMipSize: " << offsetof(VkPhysicalDeviceSparseProperties, residencyAlignedMipSize) << std::endl;
        file << "    residencyNonResidentStrict: " << offsetof(VkPhysicalDeviceSparseProperties, residencyNonResidentStrict) << std::endl;
    file << std::endl;

    file << "VkPhysicalDeviceLimits" << std::endl;
    file << sizeof(VkPhysicalDeviceLimits) << std::endl;
        file << "    maxImageDimension1D: " << offsetof(VkPhysicalDeviceLimits, maxImageDimension1D) << std::endl;
        file << "    maxImageDimension2D: " << offsetof(VkPhysicalDeviceLimits, maxImageDimension2D) << std::endl;
        file << "    maxImageDimension3D: " << offsetof(VkPhysicalDeviceLimits, maxImageDimension3D) << std::endl;
        file << "    maxImageDimensionCube: " << offsetof(VkPhysicalDeviceLimits, maxImageDimensionCube) << std::endl;
        file << "    maxImageArrayLayers: " << offsetof(VkPhysicalDeviceLimits, maxImageArrayLayers) << std::endl;
        file << "    maxTexelBufferElements: " << offsetof(VkPhysicalDeviceLimits, maxTexelBufferElements) << std::endl;
        file << "    maxUniformBufferRange: " << offsetof(VkPhysicalDeviceLimits, maxUniformBufferRange) << std::endl;
        file << "    maxStorageBufferRange: " << offsetof(VkPhysicalDeviceLimits, maxStorageBufferRange) << std::endl;
        file << "    maxPushConstantsSize: " << offsetof(VkPhysicalDeviceLimits, maxPushConstantsSize) << std::endl;
        file << "    maxMemoryAllocationCount: " << offsetof(VkPhysicalDeviceLimits, maxMemoryAllocationCount) << std::endl;
        file << "    maxSamplerAllocationCount: " << offsetof(VkPhysicalDeviceLimits, maxSamplerAllocationCount) << std::endl;
        file << "    bufferImageGranularity: " << offsetof(VkPhysicalDeviceLimits, bufferImageGranularity) << std::endl;
        file << "    sparseAddressSpaceSize: " << offsetof(VkPhysicalDeviceLimits, sparseAddressSpaceSize) << std::endl;
        file << "    maxBoundDescriptorSets: " << offsetof(VkPhysicalDeviceLimits, maxBoundDescriptorSets) << std::endl;
        file << "    maxPerStageDescriptorSamplers: " << offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorSamplers) << std::endl;
        file << "    maxPerStageDescriptorUniformBuffers: " << offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorUniformBuffers) << std::endl;
        file << "    maxPerStageDescriptorStorageBuffers: " << offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorStorageBuffers) << std::endl;
        file << "    maxPerStageDescriptorSampledImages: " << offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorSampledImages) << std::endl;
        file << "    maxPerStageDescriptorStorageImages: " << offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorStorageImages) << std::endl;
        file << "    maxPerStageDescriptorInputAttachments: " << offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorInputAttachments) << std::endl;
        file << "    maxPerStageResources: " << offsetof(VkPhysicalDeviceLimits, maxPerStageResources) << std::endl;
        file << "    maxDescriptorSetSamplers: " << offsetof(VkPhysicalDeviceLimits, maxDescriptorSetSamplers) << std::endl;
        file << "    maxDescriptorSetUniformBuffers: " << offsetof(VkPhysicalDeviceLimits, maxDescriptorSetUniformBuffers) << std::endl;
        file << "    maxDescriptorSetUniformBuffersDynamic: " << offsetof(VkPhysicalDeviceLimits, maxDescriptorSetUniformBuffersDynamic) << std::endl;
        file << "    maxDescriptorSetStorageBuffers: " << offsetof(VkPhysicalDeviceLimits, maxDescriptorSetStorageBuffers) << std::endl;
        file << "    maxDescriptorSetStorageBuffersDynamic: " << offsetof(VkPhysicalDeviceLimits, maxDescriptorSetStorageBuffersDynamic) << std::endl;
        file << "    maxDescriptorSetSampledImages: " << offsetof(VkPhysicalDeviceLimits, maxDescriptorSetSampledImages) << std::endl;
        file << "    maxDescriptorSetStorageImages: " << offsetof(VkPhysicalDeviceLimits, maxDescriptorSetStorageImages) << std::endl;
        file << "    maxDescriptorSetInputAttachments: " << offsetof(VkPhysicalDeviceLimits, maxDescriptorSetInputAttachments) << std::endl;
        file << "    maxVertexInputAttributes: " << offsetof(VkPhysicalDeviceLimits, maxVertexInputAttributes) << std::endl;
        file << "    maxVertexInputBindings: " << offsetof(VkPhysicalDeviceLimits, maxVertexInputBindings) << std::endl;
        file << "    maxVertexInputAttributeOffset: " << offsetof(VkPhysicalDeviceLimits, maxVertexInputAttributeOffset) << std::endl;
        file << "    maxVertexInputBindingStride: " << offsetof(VkPhysicalDeviceLimits, maxVertexInputBindingStride) << std::endl;
        file << "    maxVertexOutputComponents: " << offsetof(VkPhysicalDeviceLimits, maxVertexOutputComponents) << std::endl;
        file << "    maxTessellationGenerationLevel: " << offsetof(VkPhysicalDeviceLimits, maxTessellationGenerationLevel) << std::endl;
        file << "    maxTessellationPatchSize: " << offsetof(VkPhysicalDeviceLimits, maxTessellationPatchSize) << std::endl;
        file << "    maxTessellationControlPerVertexInputComponents: " << offsetof(VkPhysicalDeviceLimits, maxTessellationControlPerVertexInputComponents) << std::endl;
        file << "    maxTessellationControlPerVertexOutputComponents: " << offsetof(VkPhysicalDeviceLimits, maxTessellationControlPerVertexOutputComponents) << std::endl;
        file << "    maxTessellationControlPerPatchOutputComponents: " << offsetof(VkPhysicalDeviceLimits, maxTessellationControlPerPatchOutputComponents) << std::endl;
        file << "    maxTessellationControlTotalOutputComponents: " << offsetof(VkPhysicalDeviceLimits, maxTessellationControlTotalOutputComponents) << std::endl;
        file << "    maxTessellationEvaluationInputComponents: " << offsetof(VkPhysicalDeviceLimits, maxTessellationEvaluationInputComponents) << std::endl;
        file << "    maxTessellationEvaluationOutputComponents: " << offsetof(VkPhysicalDeviceLimits, maxTessellationEvaluationOutputComponents) << std::endl;
        file << "    maxGeometryShaderInvocations: " << offsetof(VkPhysicalDeviceLimits, maxGeometryShaderInvocations) << std::endl;
        file << "    maxGeometryInputComponents: " << offsetof(VkPhysicalDeviceLimits, maxGeometryInputComponents) << std::endl;
        file << "    maxGeometryOutputComponents: " << offsetof(VkPhysicalDeviceLimits, maxGeometryOutputComponents) << std::endl;
        file << "    maxGeometryOutputVertices: " << offsetof(VkPhysicalDeviceLimits, maxGeometryOutputVertices) << std::endl;
        file << "    maxGeometryTotalOutputComponents: " << offsetof(VkPhysicalDeviceLimits, maxGeometryTotalOutputComponents) << std::endl;
        file << "    maxFragmentInputComponents: " << offsetof(VkPhysicalDeviceLimits, maxFragmentInputComponents) << std::endl;
        file << "    maxFragmentOutputAttachments: " << offsetof(VkPhysicalDeviceLimits, maxFragmentOutputAttachments) << std::endl;
        file << "    maxFragmentDualSrcAttachments: " << offsetof(VkPhysicalDeviceLimits, maxFragmentDualSrcAttachments) << std::endl;
        file << "    maxFragmentCombinedOutputResources: " << offsetof(VkPhysicalDeviceLimits, maxFragmentCombinedOutputResources) << std::endl;
        file << "    maxComputeSharedMemorySize: " << offsetof(VkPhysicalDeviceLimits, maxComputeSharedMemorySize) << std::endl;
        file << "    maxComputeWorkGroupCount: " << offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupCount) << std::endl;
        file << "    maxComputeWorkGroupInvocations: " << offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupInvocations) << std::endl;
        file << "    maxComputeWorkGroupSize: " << offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupSize) << std::endl;
        file << "    subPixelPrecisionBits: " << offsetof(VkPhysicalDeviceLimits, subPixelPrecisionBits) << std::endl;
        file << "    subTexelPrecisionBits: " << offsetof(VkPhysicalDeviceLimits, subTexelPrecisionBits) << std::endl;
        file << "    mipmapPrecisionBits: " << offsetof(VkPhysicalDeviceLimits, mipmapPrecisionBits) << std::endl;
        file << "    maxDrawIndexedIndexValue: " << offsetof(VkPhysicalDeviceLimits, maxDrawIndexedIndexValue) << std::endl;
        file << "    maxDrawIndirectCount: " << offsetof(VkPhysicalDeviceLimits, maxDrawIndirectCount) << std::endl;
        file << "    maxSamplerLodBias: " << offsetof(VkPhysicalDeviceLimits, maxSamplerLodBias) << std::endl;
        file << "    maxSamplerAnisotropy: " << offsetof(VkPhysicalDeviceLimits, maxSamplerAnisotropy) << std::endl;
        file << "    maxViewports: " << offsetof(VkPhysicalDeviceLimits, maxViewports) << std::endl;
        file << "    maxViewportDimensions: " << offsetof(VkPhysicalDeviceLimits, maxViewportDimensions) << std::endl;
        file << "    viewportBoundsRange: " << offsetof(VkPhysicalDeviceLimits, viewportBoundsRange) << std::endl;
        file << "    viewportSubPixelBits: " << offsetof(VkPhysicalDeviceLimits, viewportSubPixelBits) << std::endl;
        file << "    minMemoryMapAlignment: " << offsetof(VkPhysicalDeviceLimits, minMemoryMapAlignment) << std::endl;
        file << "    minTexelBufferOffsetAlignment: " << offsetof(VkPhysicalDeviceLimits, minTexelBufferOffsetAlignment) << std::endl;
        file << "    minUniformBufferOffsetAlignment: " << offsetof(VkPhysicalDeviceLimits, minUniformBufferOffsetAlignment) << std::endl;
        file << "    minStorageBufferOffsetAlignment: " << offsetof(VkPhysicalDeviceLimits, minStorageBufferOffsetAlignment) << std::endl;
        file << "    minTexelOffset: " << offsetof(VkPhysicalDeviceLimits, minTexelOffset) << std::endl;
        file << "    maxTexelOffset: " << offsetof(VkPhysicalDeviceLimits, maxTexelOffset) << std::endl;
        file << "    minTexelGatherOffset: " << offsetof(VkPhysicalDeviceLimits, minTexelGatherOffset) << std::endl;
        file << "    maxTexelGatherOffset: " << offsetof(VkPhysicalDeviceLimits, maxTexelGatherOffset) << std::endl;
        file << "    minInterpolationOffset: " << offsetof(VkPhysicalDeviceLimits, minInterpolationOffset) << std::endl;
        file << "    maxInterpolationOffset: " << offsetof(VkPhysicalDeviceLimits, maxInterpolationOffset) << std::endl;
        file << "    subPixelInterpolationOffsetBits: " << offsetof(VkPhysicalDeviceLimits, subPixelInterpolationOffsetBits) << std::endl;
        file << "    maxFramebufferWidth: " << offsetof(VkPhysicalDeviceLimits, maxFramebufferWidth) << std::endl;
        file << "    maxFramebufferHeight: " << offsetof(VkPhysicalDeviceLimits, maxFramebufferHeight) << std::endl;
        file << "    maxFramebufferLayers: " << offsetof(VkPhysicalDeviceLimits, maxFramebufferLayers) << std::endl;
        file << "    framebufferColorSampleCounts: " << offsetof(VkPhysicalDeviceLimits, framebufferColorSampleCounts) << std::endl;
        file << "    framebufferDepthSampleCounts: " << offsetof(VkPhysicalDeviceLimits, framebufferDepthSampleCounts) << std::endl;
        file << "    framebufferStencilSampleCounts: " << offsetof(VkPhysicalDeviceLimits, framebufferStencilSampleCounts) << std::endl;
        file << "    framebufferNoAttachmentsSampleCounts: " << offsetof(VkPhysicalDeviceLimits, framebufferNoAttachmentsSampleCounts) << std::endl;
        file << "    maxColorAttachments: " << offsetof(VkPhysicalDeviceLimits, maxColorAttachments) << std::endl;
        file << "    sampledImageColorSampleCounts: " << offsetof(VkPhysicalDeviceLimits, sampledImageColorSampleCounts) << std::endl;
        file << "    sampledImageIntegerSampleCounts: " << offsetof(VkPhysicalDeviceLimits, sampledImageIntegerSampleCounts) << std::endl;
        file << "    sampledImageDepthSampleCounts: " << offsetof(VkPhysicalDeviceLimits, sampledImageDepthSampleCounts) << std::endl;
        file << "    sampledImageStencilSampleCounts: " << offsetof(VkPhysicalDeviceLimits, sampledImageStencilSampleCounts) << std::endl;
        file << "    storageImageSampleCounts: " << offsetof(VkPhysicalDeviceLimits, storageImageSampleCounts) << std::endl;
        file << "    maxSampleMaskWords: " << offsetof(VkPhysicalDeviceLimits, maxSampleMaskWords) << std::endl;
        file << "    timestampComputeAndGraphics: " << offsetof(VkPhysicalDeviceLimits, timestampComputeAndGraphics) << std::endl;
        file << "    timestampPeriod: " << offsetof(VkPhysicalDeviceLimits, timestampPeriod) << std::endl;
        file << "    maxClipDistances: " << offsetof(VkPhysicalDeviceLimits, maxClipDistances) << std::endl;
        file << "    maxCullDistances: " << offsetof(VkPhysicalDeviceLimits, maxCullDistances) << std::endl;
        file << "    maxCombinedClipAndCullDistances: " << offsetof(VkPhysicalDeviceLimits, maxCombinedClipAndCullDistances) << std::endl;
        file << "    discreteQueuePriorities: " << offsetof(VkPhysicalDeviceLimits, discreteQueuePriorities) << std::endl;
        file << "    pointSizeRange: " << offsetof(VkPhysicalDeviceLimits, pointSizeRange) << std::endl;
        file << "    lineWidthRange: " << offsetof(VkPhysicalDeviceLimits, lineWidthRange) << std::endl;
        file << "    pointSizeGranularity: " << offsetof(VkPhysicalDeviceLimits, pointSizeGranularity) << std::endl;
        file << "    lineWidthGranularity: " << offsetof(VkPhysicalDeviceLimits, lineWidthGranularity) << std::endl;
        file << "    strictLines: " << offsetof(VkPhysicalDeviceLimits, strictLines) << std::endl;
        file << "    standardSampleLocations: " << offsetof(VkPhysicalDeviceLimits, standardSampleLocations) << std::endl;
        file << "    optimalBufferCopyOffsetAlignment: " << offsetof(VkPhysicalDeviceLimits, optimalBufferCopyOffsetAlignment) << std::endl;
        file << "    optimalBufferCopyRowPitchAlignment: " << offsetof(VkPhysicalDeviceLimits, optimalBufferCopyRowPitchAlignment) << std::endl;
        file << "    nonCoherentAtomSize: " << offsetof(VkPhysicalDeviceLimits, nonCoherentAtomSize) << std::endl;
    file << std::endl;

    file << "VkSemaphoreCreateInfo" << std::endl;
    file << sizeof(VkSemaphoreCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkSemaphoreCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkSemaphoreCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkSemaphoreCreateInfo, flags) << std::endl;
    file << std::endl;

    file << "VkQueryPoolCreateInfo" << std::endl;
    file << sizeof(VkQueryPoolCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkQueryPoolCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkQueryPoolCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkQueryPoolCreateInfo, flags) << std::endl;
        file << "    queryType: " << offsetof(VkQueryPoolCreateInfo, queryType) << std::endl;
        file << "    queryCount: " << offsetof(VkQueryPoolCreateInfo, queryCount) << std::endl;
        file << "    pipelineStatistics: " << offsetof(VkQueryPoolCreateInfo, pipelineStatistics) << std::endl;
    file << std::endl;

    file << "VkFramebufferCreateInfo" << std::endl;
    file << sizeof(VkFramebufferCreateInfo) << std::endl;
        file << "    sType: " << offsetof(VkFramebufferCreateInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkFramebufferCreateInfo, pNext) << std::endl;
        file << "    flags: " << offsetof(VkFramebufferCreateInfo, flags) << std::endl;
        file << "    renderPass: " << offsetof(VkFramebufferCreateInfo, renderPass) << std::endl;
        file << "    attachmentCount: " << offsetof(VkFramebufferCreateInfo, attachmentCount) << std::endl;
        file << "    pAttachments: " << offsetof(VkFramebufferCreateInfo, pAttachments) << std::endl;
        file << "    width: " << offsetof(VkFramebufferCreateInfo, width) << std::endl;
        file << "    height: " << offsetof(VkFramebufferCreateInfo, height) << std::endl;
        file << "    layers: " << offsetof(VkFramebufferCreateInfo, layers) << std::endl;
    file << std::endl;

    file << "VkDrawIndirectCommand" << std::endl;
    file << sizeof(VkDrawIndirectCommand) << std::endl;
        file << "    vertexCount: " << offsetof(VkDrawIndirectCommand, vertexCount) << std::endl;
        file << "    instanceCount: " << offsetof(VkDrawIndirectCommand, instanceCount) << std::endl;
        file << "    firstVertex: " << offsetof(VkDrawIndirectCommand, firstVertex) << std::endl;
        file << "    firstInstance: " << offsetof(VkDrawIndirectCommand, firstInstance) << std::endl;
    file << std::endl;

    file << "VkDrawIndexedIndirectCommand" << std::endl;
    file << sizeof(VkDrawIndexedIndirectCommand) << std::endl;
        file << "    indexCount: " << offsetof(VkDrawIndexedIndirectCommand, indexCount) << std::endl;
        file << "    instanceCount: " << offsetof(VkDrawIndexedIndirectCommand, instanceCount) << std::endl;
        file << "    firstIndex: " << offsetof(VkDrawIndexedIndirectCommand, firstIndex) << std::endl;
        file << "    vertexOffset: " << offsetof(VkDrawIndexedIndirectCommand, vertexOffset) << std::endl;
        file << "    firstInstance: " << offsetof(VkDrawIndexedIndirectCommand, firstInstance) << std::endl;
    file << std::endl;

    file << "VkDispatchIndirectCommand" << std::endl;
    file << sizeof(VkDispatchIndirectCommand) << std::endl;
        file << "    x: " << offsetof(VkDispatchIndirectCommand, x) << std::endl;
        file << "    y: " << offsetof(VkDispatchIndirectCommand, y) << std::endl;
        file << "    z: " << offsetof(VkDispatchIndirectCommand, z) << std::endl;
    file << std::endl;

    file << "VkSubmitInfo" << std::endl;
    file << sizeof(VkSubmitInfo) << std::endl;
        file << "    sType: " << offsetof(VkSubmitInfo, sType) << std::endl;
        file << "    pNext: " << offsetof(VkSubmitInfo, pNext) << std::endl;
        file << "    waitSemaphoreCount: " << offsetof(VkSubmitInfo, waitSemaphoreCount) << std::endl;
        file << "    pWaitSemaphores: " << offsetof(VkSubmitInfo, pWaitSemaphores) << std::endl;
        file << "    pWaitDstStageMask: " << offsetof(VkSubmitInfo, pWaitDstStageMask) << std::endl;
        file << "    commandBufferCount: " << offsetof(VkSubmitInfo, commandBufferCount) << std::endl;
        file << "    pCommandBuffers: " << offsetof(VkSubmitInfo, pCommandBuffers) << std::endl;
        file << "    signalSemaphoreCount: " << offsetof(VkSubmitInfo, signalSemaphoreCount) << std::endl;
        file << "    pSignalSemaphores: " << offsetof(VkSubmitInfo, pSignalSemaphores) << std::endl;
    file << std::endl;

    file << "VkDisplayPropertiesKHR" << std::endl;
    file << sizeof(VkDisplayPropertiesKHR) << std::endl;
        file << "    display: " << offsetof(VkDisplayPropertiesKHR, display) << std::endl;
        file << "    displayName: " << offsetof(VkDisplayPropertiesKHR, displayName) << std::endl;
        file << "    physicalDimensions: " << offsetof(VkDisplayPropertiesKHR, physicalDimensions) << std::endl;
        file << "    physicalResolution: " << offsetof(VkDisplayPropertiesKHR, physicalResolution) << std::endl;
        file << "    supportedTransforms: " << offsetof(VkDisplayPropertiesKHR, supportedTransforms) << std::endl;
        file << "    planeReorderPossible: " << offsetof(VkDisplayPropertiesKHR, planeReorderPossible) << std::endl;
        file << "    persistentContent: " << offsetof(VkDisplayPropertiesKHR, persistentContent) << std::endl;
    file << std::endl;

    file << "VkDisplayPlanePropertiesKHR" << std::endl;
    file << sizeof(VkDisplayPlanePropertiesKHR) << std::endl;
        file << "    currentDisplay: " << offsetof(VkDisplayPlanePropertiesKHR, currentDisplay) << std::endl;
        file << "    currentStackIndex: " << offsetof(VkDisplayPlanePropertiesKHR, currentStackIndex) << std::endl;
    file << std::endl;

    file << "VkDisplayModeParametersKHR" << std::endl;
    file << sizeof(VkDisplayModeParametersKHR) << std::endl;
        file << "    visibleRegion: " << offsetof(VkDisplayModeParametersKHR, visibleRegion) << std::endl;
        file << "    refreshRate: " << offsetof(VkDisplayModeParametersKHR, refreshRate) << std::endl;
    file << std::endl;

    file << "VkDisplayModePropertiesKHR" << std::endl;
    file << sizeof(VkDisplayModePropertiesKHR) << std::endl;
        file << "    displayMode: " << offsetof(VkDisplayModePropertiesKHR, displayMode) << std::endl;
        file << "    parameters: " << offsetof(VkDisplayModePropertiesKHR, parameters) << std::endl;
    file << std::endl;

    file << "VkDisplayModeCreateInfoKHR" << std::endl;
    file << sizeof(VkDisplayModeCreateInfoKHR) << std::endl;
        file << "    sType: " << offsetof(VkDisplayModeCreateInfoKHR, sType) << std::endl;
        file << "    pNext: " << offsetof(VkDisplayModeCreateInfoKHR, pNext) << std::endl;
        file << "    flags: " << offsetof(VkDisplayModeCreateInfoKHR, flags) << std::endl;
        file << "    parameters: " << offsetof(VkDisplayModeCreateInfoKHR, parameters) << std::endl;
    file << std::endl;

    file << "VkDisplayPlaneCapabilitiesKHR" << std::endl;
    file << sizeof(VkDisplayPlaneCapabilitiesKHR) << std::endl;
        file << "    supportedAlpha: " << offsetof(VkDisplayPlaneCapabilitiesKHR, supportedAlpha) << std::endl;
        file << "    minSrcPosition: " << offsetof(VkDisplayPlaneCapabilitiesKHR, minSrcPosition) << std::endl;
        file << "    maxSrcPosition: " << offsetof(VkDisplayPlaneCapabilitiesKHR, maxSrcPosition) << std::endl;
        file << "    minSrcExtent: " << offsetof(VkDisplayPlaneCapabilitiesKHR, minSrcExtent) << std::endl;
        file << "    maxSrcExtent: " << offsetof(VkDisplayPlaneCapabilitiesKHR, maxSrcExtent) << std::endl;
        file << "    minDstPosition: " << offsetof(VkDisplayPlaneCapabilitiesKHR, minDstPosition) << std::endl;
        file << "    maxDstPosition: " << offsetof(VkDisplayPlaneCapabilitiesKHR, maxDstPosition) << std::endl;
        file << "    minDstExtent: " << offsetof(VkDisplayPlaneCapabilitiesKHR, minDstExtent) << std::endl;
        file << "    maxDstExtent: " << offsetof(VkDisplayPlaneCapabilitiesKHR, maxDstExtent) << std::endl;
    file << std::endl;

    file << "VkDisplaySurfaceCreateInfoKHR" << std::endl;
    file << sizeof(VkDisplaySurfaceCreateInfoKHR) << std::endl;
        file << "    sType: " << offsetof(VkDisplaySurfaceCreateInfoKHR, sType) << std::endl;
        file << "    pNext: " << offsetof(VkDisplaySurfaceCreateInfoKHR, pNext) << std::endl;
        file << "    flags: " << offsetof(VkDisplaySurfaceCreateInfoKHR, flags) << std::endl;
        file << "    displayMode: " << offsetof(VkDisplaySurfaceCreateInfoKHR, displayMode) << std::endl;
        file << "    planeIndex: " << offsetof(VkDisplaySurfaceCreateInfoKHR, planeIndex) << std::endl;
        file << "    planeStackIndex: " << offsetof(VkDisplaySurfaceCreateInfoKHR, planeStackIndex) << std::endl;
        file << "    transform: " << offsetof(VkDisplaySurfaceCreateInfoKHR, transform) << std::endl;
        file << "    globalAlpha: " << offsetof(VkDisplaySurfaceCreateInfoKHR, globalAlpha) << std::endl;
        file << "    alphaMode: " << offsetof(VkDisplaySurfaceCreateInfoKHR, alphaMode) << std::endl;
        file << "    imageExtent: " << offsetof(VkDisplaySurfaceCreateInfoKHR, imageExtent) << std::endl;
    file << std::endl;

    file << "VkDisplayPresentInfoKHR" << std::endl;
    file << sizeof(VkDisplayPresentInfoKHR) << std::endl;
        file << "    sType: " << offsetof(VkDisplayPresentInfoKHR, sType) << std::endl;
        file << "    pNext: " << offsetof(VkDisplayPresentInfoKHR, pNext) << std::endl;
        file << "    srcRect: " << offsetof(VkDisplayPresentInfoKHR, srcRect) << std::endl;
        file << "    dstRect: " << offsetof(VkDisplayPresentInfoKHR, dstRect) << std::endl;
        file << "    persistent: " << offsetof(VkDisplayPresentInfoKHR, persistent) << std::endl;
    file << std::endl;

    file << "VkSurfaceCapabilitiesKHR" << std::endl;
    file << sizeof(VkSurfaceCapabilitiesKHR) << std::endl;
        file << "    minImageCount: " << offsetof(VkSurfaceCapabilitiesKHR, minImageCount) << std::endl;
        file << "    maxImageCount: " << offsetof(VkSurfaceCapabilitiesKHR, maxImageCount) << std::endl;
        file << "    currentExtent: " << offsetof(VkSurfaceCapabilitiesKHR, currentExtent) << std::endl;
        file << "    minImageExtent: " << offsetof(VkSurfaceCapabilitiesKHR, minImageExtent) << std::endl;
        file << "    maxImageExtent: " << offsetof(VkSurfaceCapabilitiesKHR, maxImageExtent) << std::endl;
        file << "    maxImageArrayLayers: " << offsetof(VkSurfaceCapabilitiesKHR, maxImageArrayLayers) << std::endl;
        file << "    supportedTransforms: " << offsetof(VkSurfaceCapabilitiesKHR, supportedTransforms) << std::endl;
        file << "    currentTransform: " << offsetof(VkSurfaceCapabilitiesKHR, currentTransform) << std::endl;
        file << "    supportedCompositeAlpha: " << offsetof(VkSurfaceCapabilitiesKHR, supportedCompositeAlpha) << std::endl;
        file << "    supportedUsageFlags: " << offsetof(VkSurfaceCapabilitiesKHR, supportedUsageFlags) << std::endl;
    file << std::endl;

    file << "VkSurfaceFormatKHR" << std::endl;
    file << sizeof(VkSurfaceFormatKHR) << std::endl;
        file << "    format: " << offsetof(VkSurfaceFormatKHR, format) << std::endl;
        file << "    colorSpace: " << offsetof(VkSurfaceFormatKHR, colorSpace) << std::endl;
    file << std::endl;

    file << "VkSwapchainCreateInfoKHR" << std::endl;
    file << sizeof(VkSwapchainCreateInfoKHR) << std::endl;
        file << "    sType: " << offsetof(VkSwapchainCreateInfoKHR, sType) << std::endl;
        file << "    pNext: " << offsetof(VkSwapchainCreateInfoKHR, pNext) << std::endl;
        file << "    flags: " << offsetof(VkSwapchainCreateInfoKHR, flags) << std::endl;
        file << "    surface: " << offsetof(VkSwapchainCreateInfoKHR, surface) << std::endl;
        file << "    minImageCount: " << offsetof(VkSwapchainCreateInfoKHR, minImageCount) << std::endl;
        file << "    imageFormat: " << offsetof(VkSwapchainCreateInfoKHR, imageFormat) << std::endl;
        file << "    imageColorSpace: " << offsetof(VkSwapchainCreateInfoKHR, imageColorSpace) << std::endl;
        file << "    imageExtent: " << offsetof(VkSwapchainCreateInfoKHR, imageExtent) << std::endl;
        file << "    imageArrayLayers: " << offsetof(VkSwapchainCreateInfoKHR, imageArrayLayers) << std::endl;
        file << "    imageUsage: " << offsetof(VkSwapchainCreateInfoKHR, imageUsage) << std::endl;
        file << "    imageSharingMode: " << offsetof(VkSwapchainCreateInfoKHR, imageSharingMode) << std::endl;
        file << "    queueFamilyIndexCount: " << offsetof(VkSwapchainCreateInfoKHR, queueFamilyIndexCount) << std::endl;
        file << "    pQueueFamilyIndices: " << offsetof(VkSwapchainCreateInfoKHR, pQueueFamilyIndices) << std::endl;
        file << "    preTransform: " << offsetof(VkSwapchainCreateInfoKHR, preTransform) << std::endl;
        file << "    compositeAlpha: " << offsetof(VkSwapchainCreateInfoKHR, compositeAlpha) << std::endl;
        file << "    presentMode: " << offsetof(VkSwapchainCreateInfoKHR, presentMode) << std::endl;
        file << "    clipped: " << offsetof(VkSwapchainCreateInfoKHR, clipped) << std::endl;
        file << "    oldSwapchain: " << offsetof(VkSwapchainCreateInfoKHR, oldSwapchain) << std::endl;
    file << std::endl;

    file << "VkPresentInfoKHR" << std::endl;
    file << sizeof(VkPresentInfoKHR) << std::endl;
        file << "    sType: " << offsetof(VkPresentInfoKHR, sType) << std::endl;
        file << "    pNext: " << offsetof(VkPresentInfoKHR, pNext) << std::endl;
        file << "    waitSemaphoreCount: " << offsetof(VkPresentInfoKHR, waitSemaphoreCount) << std::endl;
        file << "    pWaitSemaphores: " << offsetof(VkPresentInfoKHR, pWaitSemaphores) << std::endl;
        file << "    swapchainCount: " << offsetof(VkPresentInfoKHR, swapchainCount) << std::endl;
        file << "    pSwapchains: " << offsetof(VkPresentInfoKHR, pSwapchains) << std::endl;
        file << "    pImageIndices: " << offsetof(VkPresentInfoKHR, pImageIndices) << std::endl;
        file << "    pResults: " << offsetof(VkPresentInfoKHR, pResults) << std::endl;
    file << std::endl;

    file << "VkDebugReportCallbackCreateInfoEXT" << std::endl;
    file << sizeof(VkDebugReportCallbackCreateInfoEXT) << std::endl;
        file << "    sType: " << offsetof(VkDebugReportCallbackCreateInfoEXT, sType) << std::endl;
        file << "    pNext: " << offsetof(VkDebugReportCallbackCreateInfoEXT, pNext) << std::endl;
        file << "    flags: " << offsetof(VkDebugReportCallbackCreateInfoEXT, flags) << std::endl;
        file << "    pfnCallback: " << offsetof(VkDebugReportCallbackCreateInfoEXT, pfnCallback) << std::endl;
        file << "    pUserData: " << offsetof(VkDebugReportCallbackCreateInfoEXT, pUserData) << std::endl;
    file << std::endl;

}
