using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

using VulkanGenerator;

namespace CS_Generator {
    public class Generator {
        CSSpec spec;
        DateTime time;

        public Generator(CSSpec spec) {
            this.spec = spec;
            //Console.WriteLine("{0} enums, {1} included", spec.Enums.Count, spec.IncludedEnums.Count);
            //Console.WriteLine("{0} commands, {1} included", spec.Commands.Count, spec.IncludedCommands.Count);
            //Console.WriteLine("{0} structs, {1} included", spec.Structs.Count, spec.IncludedTypes.Count);

            time = DateTime.Now;
        }

        public void WriteStructs(string output, string _namespace) {
            string path = Path.Combine(output, "structs.cs");
            using (var writer = File.CreateText(path)) {
                writer.WriteLine("//autogenerated on {0}", time.ToString());
                writer.WriteLine("using System;");
                writer.WriteLine("using System.Runtime.InteropServices;");
                writer.WriteLine();
                writer.WriteLine("namespace {0} {{", _namespace);

                foreach (var s in spec.Structs) {
                    if (s.Union) {

                    } else {
                        writer.Write("    public");
                        if (s.Unsafe) writer.Write(" unsafe");
                        writer.WriteLine(" struct {0} {{", s.Name);

                        foreach (var f in s.Fields) {
                            if (f.Attribute != null) {
                                writer.WriteLine("        {0}", f.Attribute);
                            }
                            writer.WriteLine("        public {0} {1};", f.Type, f.Name);
                        }

                        writer.WriteLine("    }");
                        writer.WriteLine();
                    }
                }

                writer.WriteLine("}");
            }
        }

        public void WriteEnums(string output, string _namespace) {
            string path = Path.Combine(output, "enums.cs");
            using (var writer = File.CreateText(path)) {
                writer.WriteLine("//autogenerated on {0}", time.ToString());
                writer.WriteLine("using System;");
                writer.WriteLine();
                writer.WriteLine("namespace {0} {{", _namespace);

                foreach (var e in spec.Enums) {
                    if (e.Flags) {
                        writer.WriteLine("    [Flags]");
                    }
                    writer.Write("    public enum {0}", e.Name);
                    if (e.Flags) writer.Write(" : uint");
                    writer.WriteLine(" {");

                    foreach (var v in e.Values) {
                        writer.WriteLine("        {0} = {1},", v.Name, v.Value);
                    }

                    writer.WriteLine("    }");
                    writer.WriteLine();
                }

                writer.WriteLine("}");
            }
        }

        public void WriteCommands(string output, string _namespace) {
            string path = Path.Combine(output, "commands.cs");
            using (var writer = File.CreateText(path)) {
                writer.WriteLine("//autogenerated on {0}", time.ToString());
                writer.WriteLine("using System;");
                writer.WriteLine();
                writer.WriteLine("namespace {0} {{", _namespace);

                foreach (var c in spec.Commands) {
                    bool _unsafe = false;

                    foreach (var p in c.Params) {
                        if (p.Pointer > 0) {
                            _unsafe = true;
                            break;
                        }
                    }

                    writer.Write("    public");
                    if (_unsafe) writer.Write(" unsafe");
                    writer.WriteLine(" delegate {0} {1}Delegate(", c.ReturnType, c.Name);
                    for (int i = 0; i < c.Params.Count; i++) {
                        var p = c.Params[i];
                        writer.Write("        {0} {1}", p.Type, p.Name);
                        if (i != c.Params.Count - 1) writer.Write(",");
                        writer.WriteLine();
                    }
                    writer.WriteLine("    );");
                }

                writer.WriteLine("}");
            }
        }
    }
}
